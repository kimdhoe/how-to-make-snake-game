{"version":3,"sources":["webpack:///./src/components/constants-figure/index.js","webpack:///./src/components/chapters/shared/chapter/index.js","webpack:///./src/components/chapters/shared/paragraph/index.js","webpack:///./src/components/chapters/shared/important/index.js","webpack:///./src/components/chapters/shared/interesting-word/index.js","webpack:///./src/components/chapters/shared/boring-word/index.js","webpack:///./src/components/chapters/shared/snippet/index.js","webpack:///./src/components/chapters/shared/h3/index.js","webpack:///./src/components/chapters/shared/h4/index.js","webpack:///./src/components/chapters/shared/code/index.js","webpack:///./src/components/chapters/shared/data-type/index.js","webpack:///./src/components/chapters/shared/left/index.js","webpack:///./src/components/chapters/shared/right/index.js","webpack:///./src/components/chapters/shared/sticky-container/index.js","webpack:///./src/components/chapters/chapter00/index.js","webpack:///./src/components/chapters/chapter01/index.js","webpack:///./src/components/state-figure/index.js","webpack:///./src/components/empty-scene-figure/index.js","webpack:///./src/components/still-head-figure/index.js","webpack:///./src/components/moving-head-figure/index.js","webpack:///./src/components/chapters/chapter02/index.js","webpack:///./src/components/chapters/chapter03/index.js","webpack:///./src/components/controllable-head-figure/index.js","webpack:///./src/components/chapters/chapter04/index.js","webpack:///./src/components/chapters/chapter05/index.js","webpack:///./src/components/chapters/index.js","webpack:///./src/components/game/index.js","webpack:///./src/pages/index.js","webpack:///./src/snippets/code01.txt"],"names":["styles","container","marginBottom","sectionHeadingText","margin","fontSize","number","verticalAlign","paddingRight","color","title","Chapter","_ref","children","Object","core_browser_esm","css","css_browser_esm","String","padStart","Paragraph","Important","text","italic","important_ref2","InterestingWord","_ref$very","very","_ref$serif","serif","fontFamily","fontWeight","BoringWord",":hover","cursor","textDecoration","overflow","filename","textAlign","filenameText","letterSpacing","Snippet","_ref$hideFilename","hideFilename","_ref$changed","changed","code","rest","objectWithoutPropertiesLoose_default","prism","extends_default","style","base16AteliersulphurpoolLight","customStyle","language","lineNumberContainerStyle","minWidth","lineHeight","direction","whiteSpace","wordSpacing","wordBreak","tabSize","hyphens","background","float","lineNumberStyle","length","H3","h3_ref2","h3_ref3","H4","h4_ref2","h4_ref3","Code","padding","border","borderRadius","backgroundColor","DataType","data_type_ref2","Left","left_ref2","Right","right_ref2","StickyContainer","sticky_container_ref2","Chapter00","title1","display","left","sticky_container","game","right","chapter","paragraph","interesting_word","boring_word","chapter00_ref2","chapter00_ref3","chapter00_ref4","chapter00_ref5","chapter00_ref6","chapter00_ref7","h3","chapter00_ref8","href","shared_code","snippet","Drawing","_ref6","snake","food","chapter01_ref7","chapter01_Segment","x","y","map","segment","i","key","Segment","_ref8","_ref8$food","position","top","width","height","paddingBottom","Chapter01","chapter01_ref2","chapter01_ref3","chapter01_Drawing","chapter01_ref4","chapter01_ref5","ARR","push","_ref9","coordinate","type","fontStyle","ConstantsFigure","constants_figure_ref","constants_figure_ref2","constants_figure_ref3","constants_figure_ref4","constants_figure_ref5","constants_figure_Segment","constants_figure_ref6","constants_figure_ref7","constants_figure_ref8","sampleLabel","bottom","sample","alignItems","justifyContent","sampleWorld1","sampleSnake1","samplePosition1","transform","sampleDirection1","sampleWorld","sampleWorldWrapper","sampleSnake","samplePosition","sampleDirection","symbol","paddingLeft","literal","Pipe","Arrow","Times","SampleWorld","styled_base_browser_esm","target","name","SampleSnake","SamplePosition","SampleDirection","StateFigure","_ref2","_ref3","_ref4","state_figure_Arrow","state_figure_Times","state_figure_Pipe","EmptySceneFigure","empty_scene_figure_ref","empty_scene_figure_ref2","StillHeadFigure","still_head_figure_ref","still_head_figure_ref2","world","status","positions","directions","initialSnake","initialWorld","actions","tick","up","down","nextWorld","oldWorld","action","oldSnake","oldPositions","newPositions","nextHead","concat","slice","newSnake","isDead","newFood","currentHead","aSnake","isHittingWall","isEatingSelf","head","SCENE_SIZE","some","posn","isSamePosition","posn1","posn2","MovingHeadFigure","intervalID","state","handleTick","_this","setState","handleKey","e","preventDefault","handlePlayClick","handleContinueClick","uninstallKeyHandler","uninstallTimer","componentWillUnmount","this","componentDidUpdate","prevProps","prevState","installTimer","setInterval","clearInterval","installKeyHandler","document","addEventListener","removeEventListener","render","react_default","a","Fragment","moving_head_figure_Scene","onClickPlay","onClickContinue","moving_head_figure_ref","React","Component","Scene","moving_head_figure_SnakeComponent","moving_head_figure_Guidance","Guidance","moving_head_figure_ref4","moving_head_figure_WaitingForPlayer","onClick","moving_head_figure_GameOver","WaitingForPlayer","_ref5","moving_head_figure_ref6","moving_head_figure_ref7","GameOver","moving_head_figure_ref9","_ref10","moving_head_figure_ref11","SnakeComponent","_ref12","moving_head_figure_PositionComponent","PositionComponent","_ref14","_ref14$food","marginLeft","marginTop","CELL_SIZE","Chapter02","important","constants_figure","startingLineNumber","state_figure","data_type","h4","chapter02_ref2","chapter02_ref3","chapter02_ref4","chapter02_ref5","chapter02_ref6","showLineNumbers","Chapter03","empty_scene_figure","still_head_figure","ControllableHeadFigure","controllable_head_figure_Scene","controllable_head_figure_ref","controllable_head_figure_SnakeComponent","controllable_head_figure_Guidance","controllable_head_figure_ref4","controllable_head_figure_WaitingForPlayer","controllable_head_figure_GameOver","controllable_head_figure_ref6","controllable_head_figure_ref7","controllable_head_figure_ref9","controllable_head_figure_ref10","controllable_head_figure_ref11","controllable_head_figure_PositionComponent","Chapter04","moving_head_figure","controllable_head_figure","Chapter05","Chapters","chapter00","chapter01","chapter02","chapter03","chapter04","chapter05","newHead","willGrow","randomFood","aPosition","aFood","random","Game","game_Scene","game_FoodComponent","game_SnakeComponent","game_Guidance","game_ref3","game_WaitingForPlayer","game_GameOver","game_ref5","game_ref6","_ref7","game_ref8","game_ref9","game_ref10","_ref11","game_PositionComponent","FoodComponent","_ref13","_ref13$food","query","IndexPage","_data$site$siteMetada","data","site","siteMetadata","layout","seo","chapters","pages_ref2","module","exports"],"mappings":"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","file":"component---src-pages-index-js-472dce47f6023b85a83b.js","sourcesContent":["import React from 'react'\n\nconst ARR = []\nfor (let i = 0; i < 20; i++) {\n  ARR.push(i)\n}\n\nconst ConstantsFigure = () => (\n  <div>\n    <p css={[ styles.coordinate ]}>\n      (0, 0) <span css={[ styles.type ]}>Snake</span>\n    </p>\n    <div\n      css={{\n        position: 'relative',\n        paddingBottom: '100%',\n        width: '100%',\n        height: 0,\n        border: '1px solid #ced4da',\n        borderRight: 0,\n        borderBottom: 0,\n        backgroundColor: '#f1f3f5',\n      }}\n    >\n      <div\n        css={{\n          position: 'absolute',\n          top: 0,\n          right: 0,\n          bottom: 0,\n          left: 0,\n          overflow: 'hidden',\n          display: 'flex',\n        }}\n      >\n        {ARR.map(i => (\n          <div\n            key={i}\n            css={{\n              width: '5%',\n              height: '100%',\n              borderRight: '1px solid #ccc',\n            }}\n          />\n        ))}\n      </div>\n      <div\n        css={{\n          position: 'absolute',\n          top: 0,\n          right: 0,\n          bottom: 0,\n          left: 0,\n          overflow: 'hidden',\n        }}\n      >\n        {ARR.map(i => (\n          <div\n            key={i}\n            css={{\n              width: '100%',\n              height: '5%',\n              borderBottom: '1px solid #ccc',\n              display: 'flex',\n              alignItems: 'center',\n            }}\n          />\n        ))}\n      </div>\n      <Segment x={0} y={0} />\n      <Segment x={19} y={19} food />\n    </div>\n    <p css={[ styles.coordinate ]} style={{ textAlign: 'right' }}>\n      <span css={[ styles.type ]}>Food</span> (19, 19)\n    </p>\n    <div\n      css={{\n        marginTop: 3,\n        height: 11,\n        border: '1px solid #aaa',\n        borderTop: 0,\n        borderBottomLeftRadius: 11,\n        borderBottomRightRadius: 11,\n      }}\n    />\n    <div\n      css={{\n        margin: 0,\n        width: '50%',\n        height: 11,\n        borderRight: '1px solid #aaa',\n      }}\n    />\n    <p\n      css={{\n        margin: 0,\n        textAlign: 'center',\n        fontFamily: 'Georgia',\n        fontSize: '0.9em',\n        color: '#555',\n      }}\n    >\n      w = h = 500px\n    </p>\n  </div>\n)\n\nconst Segment = ({ x, y, food }) => (\n  <div\n    style={{\n      position: 'absolute',\n      top: `${x * 5}%`,\n      left: `${y * 5}%`,\n      width: '5%',\n      height: '5%',\n      backgroundColor: food ? '#ff8787' : '#5c940d',\n    }}\n  />\n)\n\nconst styles = {\n  coordinate: {\n    margin: 0,\n    fontSize: '0.9em',\n    fontFamily: 'Georgia',\n    color: '#555',\n  },\n  type: {\n    fontStyle: 'italic',\n  },\n}\n\nexport default ConstantsFigure\n","import React from 'react'\n\nconst Chapter = ({ number, title, children }) => (\n  <div css={[ styles.container ]}>\n    <h2 css={[ styles.sectionHeadingText ]}>\n      <span css={[ styles.number ]}>\n        {String(number).padStart(2, '0')}\n      </span>\n      <span css={[ styles.title ]}>\n        {title}\n      </span>\n    </h2>\n    {children}\n  </div>\n)\n\nconst styles = {\n  container: {\n    marginBottom: '4rem',\n  },\n  sectionHeadingText: {\n    margin: 0,\n    fontSize: '1.7rem',\n  },\n  number: {\n    verticalAlign: 'middle',\n    paddingRight: '0.35em',\n    fontSize: '1.7em',\n    color: '#dee2e6',\n  },\n  title: {\n    verticalAlign: 'middle',\n  },\n}\n\nexport default Chapter\n","import React from 'react'\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter'\nimport { base16AteliersulphurpoolLight } from 'react-syntax-highlighter/dist/styles/prism'\n\nconst Paragraph = ({ children }) => (\n  <p css={[ styles.container ]}>\n    {children}\n  </p>\n)\n\nconst styles = {\n  container: {\n  },\n}\n\nexport default Paragraph\n","import React from 'react'\n\nconst Important = ({ text, italic = false }) => (\n  <strong\n    css={{\n      fontWeight: 600,\n    }}\n  >\n    {text}\n  </strong>\n)\n\nexport default Important\n","import React from 'react'\n\nconst InterestingWord = ({ text, very = false, serif = true }) => (\n  <i\n    css={{\n      fontFamily: serif ? 'Georgia' : null,\n      fontWeight: very ? 600 : 400,\n    }}\n  >\n    {text}\n  </i>\n)\n\nexport default InterestingWord\n","import React from 'react'\n\nconst BoringWord = ({ text, serif = true }) => (\n  <i\n    css={{\n      fontFamily: serif ? 'Georgia' : null,\n      ':hover': {\n        cursor: 'default',\n        textDecoration: 'line-through',\n      },\n    }}\n  >\n    {text}\n  </i>\n)\n\nexport default BoringWord\n","import React from 'react'\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter'\nimport {\n  base16AteliersulphurpoolLight,\n} from 'react-syntax-highlighter/dist/styles/prism'\n\nconst Snippet = ({ children, hideFilename = false, changed = [], code, ...rest }) => (\n  <div css={[ styles.container ]}>\n    <SyntaxHighlighter\n      style={base16AteliersulphurpoolLight}\n      customStyle={{ margin: 0 }}\n      language={'javascript'}\n      // showLineNumbers\n      lineNumberContainerStyle={{\n        minWidth: 40,\n        fontFamily: `Consolas, Menlo, Monaco, \"Andale Mono WT\", \"Andale Mono\", \"Lucida Console\", \"Lucida Sans Typewriter\", \"DejaVu Sans Mono\", \"Bitstream Vera Sans Mono\", \"Liberation Mono\", \"Nimbus Mono L\", \"Courier New\", Courier, monospace`,\n        fontSize: 14,\n        lineHeight: 1.375,\n        direction: 'ltr',\n        textAlign: 'right',\n        whiteSpace: 'pre',\n        wordSpacing: 'normal',\n        wordBreak: 'normal',\n        tabSize: 4,\n        hyphens: 'none',\n        background: 'rgb(245, 247, 255)',\n        color: '#adb5bd',\n        float: 'left',\n        paddingRight: 15,\n      }}\n      lineNumberStyle={number => {\n        return {\n          color:\n            changed.length && number >= changed[0] && number <= changed[1]\n              ? '#5c940d'\n              : '#bbb',\n        }\n      }}\n      {...rest}\n    >\n      {children || code}\n    </SyntaxHighlighter>\n\n    {!hideFilename && (\n      <div css={[ styles.filename ]}>\n        <span css={[ styles.filenameText ]}>\n          src/App.js\n        </span>\n      </div>\n    )}\n  </div>\n)\n\nconst styles = {\n  container: {\n    overflow: 'hidden',\n  },\n  filename: {\n    paddingRight: '0.1em',\n    textAlign: 'right',\n  },\n  filenameText: {\n    letterSpacing: '0.04em',\n    fontSize: '0.85em',\n    color: '#868e96',\n  }\n}\n\nexport default Snippet\n","import React from 'react'\n\nconst H3 = ({ text, number }) => (\n  <h3\n    css={{\n      fontSize: '1.35em',\n    }}\n  >\n    {number && (\n      <span\n        css={{\n          paddingRight: '0.7em',\n          color: '#adb5bd',\n        }}\n      >\n        {number}\n      </span>\n    )}\n    {text}\n  </h3>\n)\n\nexport default H3\n","import React from 'react'\n\nconst H4 = ({ text, number }) => (\n  <h3\n    css={{\n      fontSize: '1em',\n    }}\n  >\n    {number && (\n      <span\n        css={{\n          paddingRight: '0.6em',\n          color: '#adb5bd',\n        }}\n      >\n        {number}\n      </span>\n    )}\n    {text}\n  </h3>\n)\n\nexport default H4\n","import React from 'react'\n\nconst Code = ({ code }) => (\n  <code\n    css={{\n      padding: '0.07em 0.2em',\n      fontFamily: `Consolas, Menlo, Monaco, 'Andale Mono WT', 'Andale Mono',\n       'Lucida Console', 'Lucida Sans Typewriter', 'DejaVu Sans Mono',\n       'Bitstream Vera Sans Mono', 'Liberation Mono', 'Nimbus Mono L',\n        'Courier New', Courier, monospace`,\n      border: '1px solid #dee2e6',\n      borderRadius: 3,\n      backgroundColor: 'rgb(245, 247, 255)',\n    }}\n  >\n    {code}\n  </code>\n)\n\nexport default Code\n","import React from 'react'\n\nconst DataType = ({ text }) => (\n  <span\n    css={{\n      fontWeight: 600,\n      fontStyle: 'italic',\n      fontFamily: 'Georgia',\n    }}\n  >\n    {text}\n  </span>\n)\n\nexport default DataType\n","import React from 'react'\n\nconst Left = ({ children }) => (\n  <div\n    css={{\n      marginRight: '2em',\n      width: '35%',\n      '@media (max-width: 768px)': {\n        display: 'none',\n      }\n    }}\n  >\n    {children}\n  </div>\n)\n\nexport default Left\n","import React from 'react'\n\nconst Right = ({ children }) => (\n  <div\n    css={{\n      width: '65%',\n      '@media (max-width: 768px)': {\n        width: '100%',\n      }\n    }}\n  >\n    {children}\n  </div>\n)\n\nexport default Right\n","import React from 'react'\n\nconst StickyContainer = ({ children, margin }) => (\n  <div\n    css={{\n      position: 'sticky',\n      top: 50,\n    }}\n    style={{\n      margin: margin || '4.5em 0 4em',\n    }}\n  >\n    {children}\n  </div>\n)\n\nexport default StickyContainer\n","import React from 'react'\n\nimport {\n  Chapter,\n  Paragraph,\n  InterestingWord,\n  BoringWord,\n  H3,\n  Code,\n  Snippet,\n  Left,\n  Right,\n  StickyContainer,\n} from '../shared'\nimport { Game } from '../../../components'\nimport * as snippets from '../../../snippets'\n\nconst Chapter00 = ({ title, title1 }) => (\n  <div style={{ display: 'flex' }}>\n    <Left>\n      <StickyContainer>\n        <Game />\n      </StickyContainer>\n    </Left>\n\n    <Right>\n      <Chapter number={0} title={'들어가며'}>\n        <Paragraph>\n          <InterestingWord text={'JavaScript'} />를 익혔고, {' '}\n          <InterestingWord text={'React'} /> 튜토리얼도 한번 따라해보았나요? 아마 지금쯤\n          지루한 <BoringWord text={'Click Counter'} />, {' '}\n          <BoringWord text={'FizzBuzz'} />, 혹은 {' '}\n          <BoringWord text={'To-do List'} /> 말고 조금 더 흥미로운 다음 단계의 프로그램을\n          만들어보고 싶다고 생각하고 있을지도 모르겠군요. {' '} 비동기나 상태 관리 같은 중요한\n          키워드를 학습할 수 있고, 다른 무엇보다도 만드는 과정이 나에게 깨달음을 줄 수 있는 그런\n          프로그램 말입니다.{' '}\n          <InterestingWord text={title1} serif={false} very />{' '}\n          <InterestingWord text={`${title}`} very />\n          은 그런 생각을 하고 있지만, 어디서부터 시작해서{' '}\n          <InterestingWord serif={false} text={'어떻게 프로그램을 만들어나가야'}/>\n          {' '}하는지 감을 잡지 못한 사람을 위한 튜토리얼입니다.\n        </Paragraph>\n\n        <Paragraph>\n          이 튜토리얼은 <InterestingWord text={'Web'} /> 기술을 다루고 있고 특히 화면을\n          그리기 위해서{' '} <InterestingWord text={'React'} />에 의존하긴 하지만 특정\n          기술이나 라이브러리의 사용법을 알리려는 의도로 만들어진 것은 아닙니다. 세세한 부분에 너무\n          연연하기보단 작은 게임이나마 프로그램의 시작부터 완성까지, 어떤 사고와 과정을 거쳐\n          만들어지는지 알아가길 바랍니다.\n        </Paragraph>\n\n        <Paragraph>\n          시작하기에 앞서 미리 귀뜀하자면, 우리는 아래의 질문들을 던지면서 진행해나가게 됩니다.\n        </Paragraph>\n\n        <ul>\n          <li css={{ fontStyle: 'italic' }}>\n            뱀 게임은 무엇인가?\n          </li>\n          <li css={{ fontStyle: 'italic' }}>\n            완성된 게임은 대략 어떤 모습인가?\n          </li>\n          <li css={{ fontStyle: 'italic' }}>\n            게임을 표현하는 데에 필요한 데이터는 어떤 것들이고, 무슨 의미를 갖는가?\n          </li>\n          <li css={{ fontStyle: 'italic' }}>\n            데이터를 어떻게 코드로 표현할 것인가?\n          </li>\n          <li css={{ fontStyle: 'italic' }}>\n            어떻게 화면에 출력할 것인가?\n          </li>\n          <li css={{ fontStyle: 'italic' }}>\n            게임 상에서 일어나는 변화를 어떻게 처리하고 반영할 것인가?\n          </li>\n        </ul>\n\n        <H3 number={'0.1'} text={'프로젝트 설정'} />\n\n        <Paragraph>\n          이 튜토리얼은 복잡한 설정을 피하기 위해{' '}\n          <a\n            css={{ color: '#333', }}\n            href=\"\"\n          >\n            <InterestingWord very text={'create-react-app'}/>\n          </a>을 사용합니다. 새로 생성한 프로젝트의 <Code code={'src/App.js'}/> 파일의 내용을\n          지운 후, 아래와 같은 상태에서 시작하도록 하겠습니다.\n        </Paragraph>\n\n        <Snippet\n          code={\n            `\\\nimport React from 'react'\n\nclass Game extends React.Component {\n  render () {\n    return null\n  }\n}\n\nexport default Game`\n          }\n        />\n      </Chapter>\n    </Right>\n  </div>\n)\n\nexport default Chapter00\n","import React from 'react'\n\nimport {\n  Chapter,\n  Paragraph,\n  InterestingWord,\n  BoringWord,\n  Snippet,\n  Left,\n  Right,\n  StickyContainer,\n} from '../shared'\nimport { Game } from '../../../components'\nimport * as snippets from '../../../snippets'\n\nconst Chapter01 = ({ title, title1 }) => (\n  <div style={{ display: 'flex' }}>\n    <Chapter number={1} title={'뱀 게임'}>\n      <Paragraph>\n        우리가 만드려는 뱀 게임은 아주 유명한 고전입니다. 화면에 뱀과 먹이가 동시에 표시되고,\n        뱀은 일정 시간 간격으로 한 칸씩 전진합니다. 플레이어는 방향키로 뱀의 이동방향을 변경할 수 있습니다.\n        뱀이 먹이를 먹을 때마다 뱀의 길이가 늘어나고, 새로운 먹이가 나타납니다.\n        뱀이 벽에 부딪치거나 자기 몸통을 물면 게임은 종료됩니다.\n      </Paragraph>\n\n      <Paragraph>\n        만드려는 프로그램을 충분히 이해하는 것은 말할 필요도 없이 매우 중요한 일입니다.\n        우리가 가장 먼저 할 일은 연필로 종이에 그림을 그려보면서 실행 중인 게임이 어떤 모습일지\n        상상해보는 것입니다. 각기 다른 상태에서 실행 중인 프로그램을 시각화해보면 다음과 같습니다.\n      </Paragraph>\n\n      <div\n        css={{\n          display: 'flex',\n          justifyContent: 'space-between',\n        }}\n      >\n        <div css={{ width: '32%' }}>\n          <Drawing\n            food={{ x: 3, y: 3 }}\n            snake={[ { x: 9, y: 9 } ]}\n          />\n        </div>\n        <div css={{ width: '32%' }}>\n          <Drawing\n            food={{ x: 15, y: 7 }}\n            snake={[\n              { x: 12, y: 7 },\n              { x: 11, y: 7 },\n              { x: 10, y: 7 },\n              { x: 10, y: 8 },\n              { x: 10, y: 9 },\n              { x: 10, y: 10 },\n              { x: 10, y: 11 },\n              { x: 10, y: 12 },\n              { x: 9, y: 12 },\n              { x: 8, y: 12 },\n              { x: 7, y: 12 },\n              { x: 6, y: 12 },\n              { x: 5, y: 12 },\n              { x: 5, y: 11 },\n              { x: 5, y: 10 },\n            ]}\n          />\n        </div>\n        <div css={{ width: '32%' }}>\n          <Drawing\n            food={{ x: 3, y: 19 }}\n            snake={[\n              { x: 7, y: 19 },\n              { x: 7, y: 18 },\n              { x: 7, y: 17 },\n              { x: 7, y: 16 },\n              { x: 8, y: 16 },\n              { x: 8, y: 15 },\n              { x: 8, y: 14 },\n              { x: 8, y: 13 },\n              { x: 8, y: 12 },\n              { x: 8, y: 11 },\n              { x: 8, y: 10 },\n              { x: 8, y: 10 },\n              { x: 8, y: 9 },\n              { x: 8, y: 8 },\n              { x: 8, y: 7 },\n              { x: 8, y: 6 },\n              { x: 9, y: 6 },\n              { x: 10, y: 6 },\n              { x: 11, y: 6 },\n              { x: 12, y: 6 },\n              { x: 13, y: 6 },\n              { x: 14, y: 6 },\n            ]}\n          />\n        </div>\n      </div>\n\n      <Paragraph>\n        첫번째 그림은 게임이 시작하는 순간입니다. 처음에 뱀은 머리만 있는 상태로 녹색 원 하나로\n        표현되었고, 붉은 원으로 표현된 먹이가 있습니다. 두번째 그림은 몸통이 길어진 뱀이 먹이를 먹기\n        직전의 상태입니다. 마지막 그림은 뱀이 벽에 부딪혀 게임이 종료되는 상태입니다.\n      </Paragraph>\n\n      <Paragraph>\n        자, 이제 어떤 게임인지 알았으니 프로그램을 본격적으로 구현해 볼 차례입니다. 우리는 게임의\n        일부분만, 그마저도 단순화된 버전으로 먼저 구현한 뒤 프로그램에 살을 붙이면서 수정해나갈 겁니다.\n        게임의 모든 요소를 한 번에 구현하려고 하면 프로그램의 구석구석이 공사 중인 상태가 되어버리겠죠.\n        우리는 단순한 버전부터 시작해서 프로그램이 실행되는 상태를 최대한 유지하면서 차츰차츰 완성도를\n        높여나갈 겁니다.\n      </Paragraph>\n\n      <Paragraph>\n        우선 머리만 하나 있는 뱀을 만들어서 움직여보도록 할까요?\n      </Paragraph>\n    </Chapter>\n  </div>\n)\n\nconst Drawing = ({ snake, food }) => (\n  <div\n    css={{\n      position: 'relative',\n      paddingBottom: '100%',\n      width: '100%',\n      height: 0,\n      border: '1px solid #ddd',\n      backgroundColor: '#f1f3f5',\n    }}\n  >\n    <Segment x={food.x} y={food.y} food />\n    {snake.map((segment, i) => (\n      <Segment\n        key={i}\n        x={segment.x}\n        y={segment.y}\n      />\n    ))}\n  </div>\n)\n\nconst Segment = ({ x, y, food = false }) => (\n  <div\n    css={{\n      position: 'absolute',\n      left: `${x / 20 * 100}%`,\n      top: `${y / 20 * 100}%`,\n      width: '5%',\n    }}\n  >\n    <div\n      css={{\n        width: '100%',\n        height: 0,\n        paddingBottom: '100%',\n        borderRadius: '50%',\n        backgroundColor: food ? '#faa2c1' : '#5c940d',\n      }}\n    />\n  </div>\n)\n\nexport default Chapter01\n","import React from 'react'\nimport styled from '@emotion/styled'\n\nconst ARR = []\nfor (let i = 0; i < 20; i++) {\n  ARR.push(i)\n}\n\nconst styles = {\n  sampleLabel: {\n    position: 'absolute',\n    right: 0,\n    bottom: '-10%',\n    display: 'none',\n    fontFamily: 'Georgia',\n    fontWeight: 600,\n    fontStyle: 'italic',\n  },\n  sample: {\n    position: 'relative',\n    paddingBottom: '70%',\n    width: '70%',\n    height: 0,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    textAlign: 'center',\n  },\n  sampleWorld1: {\n    position: 'absolute',\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n    borderRadius: '50%',\n    backgroundColor: '#f1f3f5',\n    ':hover': {\n      backgroundColor: '#e9ecef',\n    },\n  },\n  sampleSnake1: {\n    position: 'absolute',\n    top: '20%',\n    right: '20%',\n    bottom: '20%',\n    left: '20%',\n    borderRadius: '50%',\n    backgroundColor: '#82c91e',\n  },\n  samplePosition1: {\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -100%)',\n  },\n  sampleDirection1: {\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    transform: 'translateX(-50%)',\n  },\n  container: {\n  },\n  sampleWorld: {\n    position: 'relative',\n    paddingBottom: '70%',\n    width: '70%',\n    height: 0,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    borderRadius: '50%',\n    backgroundColor: '#f1f3f5',\n    textAlign: 'center',\n  },\n  sampleWorldWrapper: {\n    position: 'absolute',\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  sampleSnake: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    width: '60%',\n    height: '60%',\n    borderRadius: '50%',\n    backgroundColor: '#82c91e',\n  },\n  samplePosition: {\n    margin: 0,\n    fontSize: '0.9em',\n    fontFamily: 'monospace',\n  },\n  sampleDirection: {\n    margin: 0,\n    fontSize: '1.3em',\n  },\n  type: {\n    fontFamily: 'Georgia',\n    textDecoration: 'underline',\n  },\n  title: {\n    fontWeight: 600,\n    fontStyle: 'italic',\n    textDecoration: 'none',\n  },\n  symbol: {\n    paddingLeft: '0.5em',\n    paddingRight: '0.5em',\n  },\n  literal: {\n    fontFamily: 'monospace',\n    textDecoration: 'none',\n  },\n}\n\nconst Pipe = () => (\n  <span\n    css={[\n      styles.symbol,\n      {\n        paddingLeft: '1em',\n        paddingRight: '1em',\n        fontSize: '0.9em',\n        color: '#aaa',\n      },\n    ]}\n  >\n    |\n  </span>\n)\n\nconst Arrow = () => (\n  <span css={[ styles.symbol ]}>\n    ⇐\n  </span>\n)\n\nconst Times = () => (\n  <span css={[ styles.symbol ]}>\n    ⨉\n  </span>\n)\n\nconst StateFigure = () => (\n  <div css={[ styles.container ]}>\n    <div>\n      <p>\n        <span css={[ styles.type, styles.title ]}>\n          World\n        </span>\n        <Arrow />\n        <span css={[ styles.type ]}>\n          Snake\n        </span>\n      </p>\n\n      <p>\n        <span css={[ styles.type, styles.title ]}>\n          Snake\n        </span>\n        <Arrow />\n        <span css={[ styles.type ]}>\n          Position\n        </span>\n        <Times />\n        <span css={[ styles.type ]}>\n          Direction\n        </span>\n      </p>\n\n      <p>\n        <span css={[ styles.type, styles.title ]}>\n          Position\n        </span>\n        <Arrow />\n        <span css={[ styles.type ]}>\n          number\n        </span>\n        <Times />\n        <span css={[ styles.type ]}>\n          number\n        </span>\n      </p>\n\n      <p>\n        <span css={[ styles.type, styles.title ]}>\n          Direction\n        </span>\n        <Arrow />\n        <span css={[ styles.type, styles.literal ]}>\n          ↑\n        </span>\n        <Pipe />\n        <span css={[ styles.type, styles.literal ]}>\n          →\n        </span>\n        <Pipe />\n        <span css={[ styles.type, styles.literal ]}>\n          ↓\n        </span>\n        <Pipe />\n        <span css={[ styles.type, styles.literal ]}>\n          ←\n        </span>\n      </p>\n    </div>\n\n    <div css={[ styles.sample ]}>\n      <SampleWorld />\n      <SampleSnake />\n      <SamplePosition>\n        (5, 7)\n      </SamplePosition>\n      <SampleDirection>\n        →\n      </SampleDirection>\n\n      <p\n        css={[\n          styles.sampleLabel,\n          {\n            [`${SampleWorld}:hover ~ &`]: {\n              display: 'block',\n            }\n          }\n        ]}\n      >\n        World\n      </p>\n      <p\n        css={[\n          styles.sampleLabel,\n          {\n            [`${SampleSnake}:hover ~ &`]: {\n              display: 'block',\n            }\n          }\n        ]}\n      >\n        Snake\n      </p>\n      <p\n        css={[\n          styles.sampleLabel,\n          {\n            [`${SamplePosition}:hover ~ &`]: {\n              display: 'block',\n            },\n          },\n        ]}\n      >\n        Position\n      </p>\n      <p\n        css={[\n          styles.sampleLabel,\n          {\n            [`${SampleDirection}:hover ~ &`]: {\n              display: 'block',\n            },\n          },\n        ]}\n      >\n        Direction\n      </p>\n    </div>\n  </div>\n)\n\nconst SampleWorld = styled.div`\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  border-radius: 50%;\n  background-color: #f1f3f5;\n`\nconst SampleSnake = styled.div`\n  position: absolute;\n  top: 20%;\n  right: 20%;\n  bottom: 20%;\n  left: 20%;\n  border-radius: 50%;\n  background-color: #82c91e;\n`\nconst SamplePosition = styled.div`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin: 0;\n  width: 35%;\n  font-size: 0.9em;\n  font-family: monospace;\n  cursor: default;\n  transform: translate(-50%, -100%);\n`\nconst SampleDirection = styled.div`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin: 0;\n  width: 35%;\n  cursor: default;\n  transform: translateX(-50%);\n`\n\nexport default StateFigure\n","import React from 'react'\n\nconst EmptySceneFigure = () => (\n  <div>\n    <div\n      css={{\n        position: 'relative',\n        paddingBottom: '100%',\n        width: '100%',\n        height: 0,\n        border: '1px solid #ced4da',\n        backgroundColor: '#f1f3f5',\n      }}\n    />\n    <p\n      css={{\n        margin: '0.3em 0 0',\n        textAlign: 'center',\n        fontSize: '0.9em',\n      }}\n    >\n      빈 무대\n    </p>\n  </div>\n)\n\nexport default EmptySceneFigure\n","import React from 'react'\n\nconst StillHeadFigure = () => (\n  <div>\n    <div\n      css={{\n        position: 'relative',\n        paddingBottom: '100%',\n        width: '100%',\n        height: 0,\n        border: '1px solid #ced4da',\n        backgroundColor: '#f1f3f5',\n      }}\n    >\n      <div\n        style={{\n          position: 'absolute',\n          width: '5%',\n          height: '5%',\n          left: `${5 * 5}%`,\n          top: `${7 * 5}%`,\n          borderRadius: '50%',\n          backgroundColor: '#5c940d',\n        }}\n      />\n    </div>\n    <p\n      css={{\n        margin: '0.3em 0 0',\n        textAlign: 'center',\n        fontSize: '0.9em',\n      }}\n    >\n      멈춰있는 뱀\n    </p>\n  </div>\n)\n\nexport default StillHeadFigure\n","import React from 'react'\nimport random from 'lodash.random'\n\n// =============================================================================\n// Constants\n// =============================================================================\n\n// SCENE_SIZE :: number\n// Size of the scene. Describes how many segments fit into a row or a column.\n// e.g. 20: Up to twenty segments can fit into one row/column.\nconst SCENE_SIZE = 20\n\n// CELL_SIZE :: number\n// A percentage value that tells how much space a segment occupies in a row/col.\n// That is:\n//   CELL_SIZE * SCENE_SIZE = 100\n// e.g. 5: 5%\nconst CELL_SIZE = 100 / SCENE_SIZE\n\n// SCENE_COLOR ::string\nconst SCENE_COLOR = '#f1f3f5'\n\n// SNAKE_COLOR ::string\nconst SNAKE_COLOR = '#5c940d'\n\n// FOOD_COLOR ::string\nconst FOOD_COLOR = '#ffa8a8'\n\n// =============================================================================\n// Data Definitions\n// =============================================================================\n\n// A World is an object:\n//   {\n//      snake:  Snake,\n//      food:   Position,\n//      status: Status\n//   }\n\n// world :: Snake * Position -> World\nconst world = (snake, food, status) => ({ snake, food, status })\n\n// A Status is one of:\n//   - 0: waiting for player\n//   - 1: in play\n//   - 2: game over\n\n// A Snake is an object:\n//   {\n//     positions: Position[],\n//     direction: Direction,\n//   }\n\n// snake :: Position[] * Direction -> Snake\nconst snake = (positions, direction) => ({ positions, direction })\n\n// A Position is an object:\n//   {\n//     x: number,\n//     y: number,\n//   }\n\n// position :: number * number -> Position\nconst position = (x, y) => ({ x, y })\n\n// A Direction is one of:\n//   - 'stop'\n//   - 'up'\n//   - 'right'\n//   - 'down'\n//   - 'left'\nconst directions = {\n  stop: 'stop',\n  up: 'up',\n  right: 'right',\n  down: 'down',\n  left: 'left',\n}\n\nconst initialSnake = snake([ position(3, 3) ], directions.right)\nconst initialWorld = world(initialSnake, position(15, 18), 0)\n\n// An Action is one of:\n//   - 'tick'\n//   - 'up'\n//   - 'down'\n//   - 'left'\n//   - 'right'\nconst actions = {\n  tick: 'tick',\n  up: 'up',\n  down: 'down',\n  left: 'left',\n  right: 'right',\n}\n\n// =============================================================================\n// Functions\n// =============================================================================\n\n// nextWorld :: World * Action -> World\n// Given a state and an action, produces a next state.\nconst nextWorld = (oldWorld = initialWorld, action) => {\n  if (!action) return oldWorld\n\n  switch (action) {\n    case actions.tick: {\n      if (oldWorld.status === 2) {\n        return oldWorld\n      }\n\n      // oldSnake :: Snake\n      const oldSnake = oldWorld.snake\n      // oldPositions :: Position[]\n      const oldPositions = oldSnake.positions\n      // newHead :: Position\n      const newHead = nextHead(oldPositions[0], oldSnake.direction)\n\n      // newPositions :: Positions[]\n      const newPositions =\n        [ newHead, ...oldPositions.slice(0, oldPositions.length - 1) ]\n      // newSnake :: Snake\n      const newSnake = snake(newPositions, oldSnake.direction)\n\n      if (isDead(newSnake)) {\n        return initialWorld\n      }\n\n      // newFood :: Position\n      const newFood = oldWorld.food\n\n      return world(newSnake, newFood, 1)\n    }\n\n    case actions.up: {\n      if (oldWorld.snake.direction === directions.down) {\n        return oldWorld\n      }\n\n      return world(\n        snake(oldWorld.snake.positions, directions.up),\n        oldWorld.food,\n        oldWorld.status\n      )\n    }\n\n    case actions.down: {\n      if (oldWorld.snake.direction === directions.up) {\n        return oldWorld\n      }\n\n      return world(\n        snake(oldWorld.snake.positions, directions.down),\n        oldWorld.food,\n        oldWorld.status\n      )\n    }\n\n    case actions.left: {\n      if (oldWorld.snake.direction === directions.right) {\n        return oldWorld\n      }\n\n      return world(\n        snake(oldWorld.snake.positions, directions.left),\n        oldWorld.food,\n        oldWorld.status\n      )\n    }\n\n    case actions.right: {\n      if (oldWorld.snake.direction === directions.left) {\n        return oldWorld\n      }\n\n      return world(\n        snake(oldWorld.snake.positions, directions.right),\n        oldWorld.food,\n        oldWorld.status\n      )\n    }\n\n    default:\n      return oldWorld\n  }\n}\n\n// nextHead :: Position * Direction -> Position\n// Given a snake's head and a direction, produces a next head.\nconst nextHead = (currentHead, direction) => {\n  let x = currentHead.x\n  let y = currentHead.y\n\n  if (direction === directions.up) {\n    y = y - 1\n  } else if (direction === directions.right) {\n    x = x + 1\n  } else if (direction === directions.down) {\n    y = y + 1\n  } else if (direction === directions.left) {\n    x = x - 1\n  }\n\n  return position(x, y)\n}\n\n// isDead :: Snake -> boolean\n// Is a given snake dead?\n// A snake dies:\n//   - if it hits a wall.\n//   - if it eats itself.\nconst isDead = aSnake =>\n  isHittingWall(aSnake) || isEatingSelf(aSnake)\n\n// isHittingWall :: Snake -> Bool\n// Has a given snake hit a wall?\nconst isHittingWall = aSnake => {\n  const head = aSnake.positions[0]\n\n  return (\n    head.x >= SCENE_SIZE + 20 ||\n    head.y >= SCENE_SIZE + 20 ||\n    head.x < 0 - 20 ||\n    head.y < 0 - 20\n  )\n}\n\n// isEatingSelf :: Snake -> Bool\n// Has a given snake eaten itself?\nconst isEatingSelf = aSnake =>\n  aSnake.positions.slice(1).some(\n    posn => isSamePosition(posn, aSnake.positions[0])\n  )\n\n// isSamePosition :: Position * Position -> boolean\n// Are two given positions actually a same position?\nconst isSamePosition = (posn1, posn2) =>\n  posn1.x === posn2.x && posn1.y === posn2.y\n\n// =============================================================================\n// Main\n// =============================================================================\n\nclass MovingHeadFigure extends React.Component {\n  // intervalID :: number\n  intervalID = 0\n\n  // state :: World\n  state = nextWorld()\n\n  // componentWillUnmount :: -> void\n  componentWillUnmount () {\n    // this.uninstallKeyHandler()\n    this.uninstallTimer()\n  }\n\n  // componentDidUpdate :: object * World -> void\n  componentDidUpdate (prevProps, prevState) {\n    if (prevState.status !== 2 && this.state.status === 2) {\n      // this.uninstallKeyHandler()\n      this.uninstallTimer()\n    } else if (prevState.status !== 1 && this.state.status === 1) {\n      // this.installKeyHandler()\n      this.installTimer()\n    } else if (prevState.status !== 0 && this.state.status === 0) {\n      // this.uninstallKeyHandler()\n      this.uninstallTimer()\n    }\n  }\n\n  // installTimer :: -> void\n  installTimer () {\n    this.uninstallTimer()\n    this.intervalID = setInterval(this.handleTick, 90)\n  }\n\n  // uninstallTimer :: -> void\n  uninstallTimer () {\n    if (this.intervalID) {\n      clearInterval(this.intervalID)\n    }\n  }\n\n  // installKeyHandler :: -> void\n  installKeyHandler () {\n    this.uninstallKeyHandler()\n    document.addEventListener('keydown', this.handleKey)\n  }\n\n  // uninstallKeyHandler :: -> void\n  uninstallKeyHandler () {\n    document.removeEventListener('keydown', this.handleKey)\n  }\n\n  // handleTick :: -> void\n  handleTick = () => {\n    this.setState(state => nextWorld(state, actions.tick))\n  }\n\n  // handleKey :: KeyboardEvent -> void\n  handleKey = e => {\n    e.preventDefault()\n    const { key } = e\n    let action = null\n\n    if (key === 'ArrowUp' || key === 'k') {\n      action = actions.up\n    } else if (key === 'ArrowRight' || key === 'l') {\n      action = actions.right\n    } else if (key === 'ArrowDown' || key === 'j') {\n      action = actions.down\n    } else if (key === 'ArrowLeft' || key === 'h') {\n      action = actions.left\n    }\n\n    if (action) {\n      this.setState(oldWorld => nextWorld(oldWorld, action))\n    }\n  }\n\n  // handlePlayClick :: -> void\n  handlePlayClick = () => {\n    this.setState(world(initialWorld.snake, initialWorld.food, 1))\n  }\n\n  // handleContinueClick :: -> void\n  handleContinueClick = () => {\n    this.uninstallKeyHandler()\n    this.uninstallTimer()\n    this.setState(initialWorld)\n  }\n\n  // render :: -> ReactElement\n  render () {\n    return (\n      <>\n        <Scene\n          world={this.state}\n          onClickPlay={this.handlePlayClick}\n          onClickContinue={this.handleContinueClick}\n        />\n        {/*<div css={{ marginTop: '1em', textAlign: 'center' }}>*/}\n          {/*<button*/}\n            {/*css={{*/}\n              {/*padding: '0.6em 0.9em',*/}\n              {/*outline: 'none',*/}\n              {/*border: '1px solid #ccc',*/}\n              {/*borderRadius: 5,*/}\n              {/*letterSpacing: '0.1em',*/}\n              {/*fontSize: '0.8em',*/}\n              {/*backgroundColor: 'transparent',*/}\n              {/*cursor: 'pointer',*/}\n              {/*':hover': {*/}\n                {/*borderColor: '#aaa',*/}\n              {/*},*/}\n            {/*}}*/}\n            {/*onClick={this.handleContinueClick}*/}\n          {/*>*/}\n            {/*RESET*/}\n          {/*</button>*/}\n          <p\n            css={{\n              margin: '0.3em 0 0',\n              textAlign: 'center',\n              fontSize: '0.9em',\n            }}\n          >\n            움직이는 뱀\n          </p>\n        {/*</div>*/}\n      </>\n    )\n  }\n}\n\n// =============================================================================\n// View\n// =============================================================================\n\n// Scene :: World * function * function -> ReactElement\nconst Scene = ({ world, onClickPlay, onClickContinue }) => (\n  <div\n    css={{\n      position: 'relative',\n      paddingBottom: '100%',\n      width: '100%',\n      height: 0,\n      border: '1px solid #ced4da',\n      backgroundColor: SCENE_COLOR,\n    }}\n  >\n    <SnakeComponent snake={world.snake} />\n    <Guidance\n      status={world.status}\n      onClickPlay={onClickPlay}\n      onClickContinue={onClickContinue}\n    />\n  </div>\n)\n\n// Guidance :: number * function * function -> ReactElement\nconst Guidance = ({ status, onClickPlay, onClickContinue }) => (\n  <div\n    css={{\n      position: 'absolute',\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0,\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      justifyContent: 'center',\n      letterSpacing: '0.1em',\n    }}\n  >\n    {status === 0 && <WaitingForPlayer onClick={onClickPlay} />}\n    {status === 2 && <GameOver onClick={onClickContinue} />}\n  </div>\n)\n\n// WaitingForPlayer :: function -> ReactElement\nconst WaitingForPlayer = ({ onClick }) => (\n  <>\n    <button\n      css={{\n        margin: 0,\n        padding: 0,\n        outline: 'none',\n        border: 'none',\n        width: '100%',\n        height: '100%',\n        letterSpacing: '0.1em',\n        fontSize: '0.8em',\n        backgroundColor: 'transparent',\n        cursor: 'pointer',\n        ':hover': {\n          borderColor: '#aaa',\n        },\n      }}\n      onClick={onClick}\n    >\n      <span\n        css={{\n          padding: '0.6em 0.9em',\n          border: '1px solid #ccc',\n          borderRadius: 5,\n          backgroundColor: 'white',\n          'button:hover &': {\n            border: '1px solid #aaa'\n          },\n        }}\n      >\n        START\n      </span>\n    </button>\n  </>\n)\n\n// GameOver :: function -> ReactElement\nconst GameOver = ({ onClick }) => (\n  <button\n    css={{\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      justifyContent: 'center',\n      margin: 0,\n      padding: 0,\n      outline: 'none',\n      border: 'none',\n      width: '100%',\n      height: '100%',\n      letterSpacing: '0.1em',\n      fontSize: '0.8em',\n      cursor: 'pointer',\n      backgroundColor: 'transparent',\n      ':hover': {\n        borderColor: '#aaa',\n      },\n    }}\n    onClick={onClick}\n  >\n    <p\n      css={{\n        margin: '0 0 0.5em 0',\n        fontSize: '1.5em',\n        fontFamily: 'Georgia',\n        fontStyle: 'italic',\n      }}\n    >\n      Game Over\n    </p>\n    <span\n      css={{\n        padding: '0.6em 0.9em',\n        border: '1px solid #ccc',\n        borderRadius: 5,\n        backgroundColor: 'white',\n        'button:hover &': {\n          border: '1px solid #aaa'\n        },\n      }}\n    >\n      INSERT COIN TO CONTINUE\n    </span>\n  </button>\n)\n\n// SnakeComponent :: Snake -> ReactElement\nconst SnakeComponent = ({ snake }) => (\n  <>\n    {snake.positions.map((position, i) => (\n      <PositionComponent\n        key={i}\n        x={position.x}\n        y={position.y}\n      />\n    ))}\n  </>\n)\n\n// PositionComponent :: Position -> ReactElement\nconst FoodComponent = ({ position }) => (\n  <PositionComponent\n    food\n    x={position.x}\n    y={position.y}\n  />\n)\n\n// PositionComponent :: number * number * boolean -> ReactElement\nconst PositionComponent = ({ x, y, food = false }) => (\n  <div\n    css={{\n      position: 'absolute',\n      left: `${x / SCENE_SIZE * 100}%`,\n      top: `${y / SCENE_SIZE * 100}%`,\n      marginLeft: -1,\n      marginTop: -1,\n      width: `${CELL_SIZE + 1}%`,\n      height: `${CELL_SIZE + 1}%`,\n      border: `2px solid ${SCENE_COLOR}`,\n      borderRadius: '50%',\n    }}\n    style={{\n      backgroundColor: food ? FOOD_COLOR : SNAKE_COLOR,\n    }}\n  />\n)\n\nexport default MovingHeadFigure\n","import React from 'react'\n\nimport {\n  Chapter,\n  Paragraph,\n  Important,\n  InterestingWord,\n  H3,\n  H4,\n  Code,\n  Snippet,\n  DataType,\n  Left,\n  Right,\n  StickyContainer,\n} from '../shared'\nimport * as snippets from '../../../snippets'\nimport ConstantsFigure from '../../constants-figure'\nimport StateFigure from '../../state-figure'\nimport EmptySceneFigure from '../../empty-scene-figure'\nimport StillHeadFigure from '../../still-head-figure'\nimport MovingHeadFigure from '../../moving-head-figure'\n\nconst Chapter02 = ({ title, title1 }) => (\n  <Chapter number={2} title={'데이터'}>\n    <Paragraph>\n      프로그램을 만들려면 프로그램에 존재하는 요소들의 데이터를 코드로 표현해야 합니다. 그러기 위해서\n      게임 상에서 <Important text={'변하지 않는 정보'}/>\n      <InterestingWord very text={'Constants'}/>와 <Important text={'변하는 정보'}/>\n      <InterestingWord very text={'State'}/>를 찾아낸 후, 각각을 코드로 옮기도록 하겠습니다.\n      위에서 그렸던 그림을 살펴보면 우리가 코드로 표현해야 할 것들이 크게 세 가지가 있습니다.\n    </Paragraph>\n\n    <ul>\n      <li>무대 — 옅은 회색의 사각형</li>\n      <li>뱀 — 검은 원 여러 개가 이어진 형태</li>\n      <li>먹이 — 붉은 원</li>\n    </ul>\n\n    <Paragraph>\n      나란히 놓인 그림 세 장에서 알 수 있듯이, 게임이 진행되는 동안 무대는 항상 그대로이고, 먹이의\n      색과 크기, 뱀을 구성하는 원들의 색과 크기도 변하지 않습니다. 반면 뱀의 길이와 위치, 진행 방향은\n      동일하지 않고, 먹이의 위치도 제각각입니다.\n    </Paragraph>\n\n    <div style={{ display: 'flex' }}>\n      <Left>\n        <StickyContainer margin={'5.5em 0 1.5em'}>\n          <ConstantsFigure />\n        </StickyContainer>\n      </Left>\n\n      <Right>\n        <H3 number={'2.1'} text={'변하지 않는 것'} />\n\n        <Paragraph>\n          우선 변하지 않는 것들의 값을 <Important text={'상수'}/>\n          <InterestingWord very text={'Constants'}/>로 정의합니다. 이 상수들을 정의하기 위해\n          다음과 같은 무대의 성질을 임의로 정합니다.\n        </Paragraph>\n\n        <ul>\n          <li>게임 무대는 정사각형이다.</li>\n          <li>게임 무대의 가로/세로는 각각 스무칸 씩이다.</li>\n        </ul>\n\n        <Snippet\n          startingLineNumber={3}\n          changed={[ 3, 33 ]}\n          code={`\\\n// ===========================\n// Constants\n// ===========================\n\n// string\n// 무대의 배경색\nconst SCENE_COLOR = '#f1f3f5'\n\n// string\n// 뱀의 색\nconst SNAKE_COLOR = '#5c940d'\n\n// string\n// 먹이의 색\nconst FOOD_COLOR = '#ff8787'\n\n// number\n// 무대의 가로/세로 길이 (단위: px)\n//   * SCENE_SIZE = SCENE_COUNT x CELL_SIZE\n//   * 500 = 20 * 25\nconst SCENE_SIZE = 500\n\n// number\n// 무대의 한 열에 들어가는 칸 수\n//   * 20 = 500 / 25\nconst SCENE_COUNT = 20\n\n// number\n// 먹이와 뱀 몸통 한 칸의 가로/세로 길이 (단위: px)\n//   * 25 = 500 / 20\nconst CELL_SIZE = 25\n\n// number\n// 뱀 이동 시간 간격 (단위: ms)\nconst INTERVAL = 500\n`}\n        />\n\n        <Paragraph>\n          길이와 관련된 값들은 게임 무대의 가로와 세로가 각각 스무 칸인 정사각형이어야 한다는 임의의\n          결정을 전제로 정의되었습니다. 그래서 무대의 가로 길이와 세로 길이가 하나의 동일한 값으로\n          표현되었고,{' '} <Code code={'CELL_SIZE'}/>는 <Code code={'SCENE_SIZE'}/>\n          {' '}500을 20으로 나눈 값이 되었습니다.\n        </Paragraph>\n      </Right>\n    </div>\n\n    <div style={{ display: 'flex' }}>\n      <Left>\n        <StickyContainer margin={'5.5em 0 1.5em'}>\n          <StateFigure />\n        </StickyContainer>\n      </Left>\n\n      <Right>\n        <H3 number={'2.2'} text={'변하는 것'} />\n\n        <Paragraph>\n          변화하는 데이터들은 게임의{' '}\n          <Important text={'상태'}/><InterestingWord very text={'State'}/>가\n          됩니다. 앞서 그림을 보면서 찾아낸 상태 데이터는 총 네 개가 있었습니다. 하지만 우리는 지금\n          머리 하나만 움직여볼 것이기 때문에 뱀의 길이와 먹이의 위치는 제외하고, 뱀의 위치와 뱀의 진행\n          방향 데이터만 생각하겠습니다.\n        </Paragraph>\n        <Paragraph>\n          한 칸짜리 뱀만 존재하는 이 게임 세계의 상태를 아래처럼{' '}\n          <DataType text={'World'}/>라는 형식의 객체로 표현할 수 있습니다.\n        </Paragraph>\n\n        <Snippet\n          startingLineNumber={35}\n          changed={[ 35, 77 ]}\n          code={\n            `\\\n// ===========================\n// Data Definitions\n// ===========================\n\n// A World is an object:\n//  {\n//    snake: Snake,\n//  }\n//    * snake: 뱀의 상태 (위치, 방향)\n\n// A Snake is an object:\n//   {\n//     position:  Position,\n//     direction: Direction,\n//   }\n//     * position:  뱀의 위치\n//     * direction: 뱀의 진행 방향\n\n// A Position is an object:\n//   {\n//     x: number,\n//     y: number,\n//   }\n//     * x: 가로 좌표. 왼쪽 끝에서 0으로 시작해서 오른쪽으로 갈수록 커진다.\n//     * y: 세로 좌표. 위쪽 끝에서 0으로 시작해서 아래쪽으로 갈수록 커진다.\n\n// A Direction is one of:\n//   - 'up'\n//   - 'down'\n//   - 'left'\n//   - 'right'\n\n// Snake -> World\n// Given a snake, produces a world.\nconst world = snake => ({ snake })\n\n// Position * Direction -> Snake\n// Given a position and a direction, produces a snake.\nconst snake = (position, direction) => ({ position, direction })\n\n// number * number -> Position\n// Given x and y coordinates, produces a position.\nconst position = (x, y) => ({ x, y })`\n          }\n        >\n        </Snippet>\n\n        <Paragraph>\n          위의 코드에서는 주석을 통해 게임 상태를 표현하는 데이터 형식들을 정의하고 있습니다. (이\n          튜토리얼에서는 주석도 프로그램의 일부로 보아주기 바랍니다.)\n        </Paragraph>\n\n        <H4\n          number={'2.2.가'}\n          text={(\n            <span css={{ fontFamily: 'Georgia', fontStyle: 'italic' }}>\n              World\n            </span>\n          )}\n        />\n\n        <Paragraph>\n          먼저 게임의 전체 상태를 표현하는{' '}\n          <DataType text={'World'}/>는 한 개의 필드를 가진 객체로 정의합니다. 이 데이터 형식 안에\n          게임에 필요한 모든 상태 정보가 들어가야 합니다.\n        </Paragraph>\n\n        <ul>\n          <li>\n            <Code code={'snake'}/>: 뱀의 상태 (머리의 위치, 방향)\n          </li>\n        </ul>\n\n        <Paragraph>\n          다음으로 <DataType text={'World'}/>를 구성하는 데에 필요한 나머지 데이터 형식들을 정의합니다.\n        </Paragraph>\n\n        <H4\n          number={'2.2.나'}\n          text={(\n            <span css={{ fontFamily: 'Georgia', fontStyle: 'italic' }}>\n              Snake\n            </span>\n          )}\n        />\n\n        <Paragraph>\n          뱀의 상태를 표현하는 <DataType text={'Snake'}/>는 각각 위치와 방향 정보를 나타내는 두 개의\n          필드를 가진 객체로 정의합니다. 이 두 개의 정보가 있으면 우리는 무대에 뱀을 어떻게 배치할지 판단할\n          수 있습니다.\n        </Paragraph>\n\n        <ul>\n          <li>\n            <Code code={'position'}/>: 뱀 머리의 위치\n          </li>\n          <li>\n            <Code code={'direction'}/>: 뱀의 진행 방향\n          </li>\n        </ul>\n\n        <H4\n          number={'2.2.다'}\n          text={(\n            <span css={{ fontFamily: 'Georgia', fontStyle: 'italic' }}>\n          Position\n        </span>\n          )}\n        />\n\n        <Paragraph>\n          위치를 표현하는 <DataType text={'Position'}/>은 각각 해당 좌표를 나타내는{' '}\n          <Code code={'x'}/>, <Code code={'y'}/> 필드를 가진 객체입니다.{' '} 우리는 게임\n          무대에 놓일 뱀의 몸통을 단순한 좌표값으로 보고 있습니다.\n        </Paragraph>\n\n        <ul>\n          <li>\n            <Code code={'x'}/>: <InterestingWord text={'x'}/> 좌표\n          </li>\n          <li>\n            <Code code={'y'}/>: <InterestingWord text={'y'}/> 좌표\n          </li>\n        </ul>\n\n        <H4\n          number={'2.2.라'}\n          text={(\n            <span css={{ fontFamily: 'Georgia', fontStyle: 'italic' }}>\n              Direction\n            </span>\n          )}\n        />\n\n        <Paragraph>\n          방향을 표현하는 <DataType text={'Direction'}/>은{' '}\n          <Code code={\"'up'\"}/>, <Code code={\"'down'\"}/>,{' '}\n          <Code code={\"'left'\"}/>,{' '}\n          <Code code={\"'right'\"}/> 네 개 중 하나의 값을 갖습니다.\n        </Paragraph>\n\n        <H4\n          number={'2.2.마'}\n          text={(\n            <>\n              <span css={{ fontFamily: 'Georgia', fontStyle: 'italic' }}>\n                World\n              </span>\n              {' '}예시\n            </>\n          )}\n        />\n\n        <Paragraph>\n          데이터 정의와 설명이 복잡하게 보였다면 코드로 <DataType text={'World'}/>의 예시값을\n          한 번 만들어볼까요?\n        </Paragraph>\n\n        <Snippet\n          hideFilename\n          showLineNumbers={false}\n          code={\n            `\\\n// Snake\nconst exampleSnake = snake(position(5, 7), 'right')\n\n// World\nconst exampleWorld = world(exampleSnake)\n// ==> {\n//       snake: {\n//         position: {\n//           x: 5,\n//           y: 7,\n//         },\n//         direction: 'right',\n//       },\n//     }\n`\n          }\n        />\n\n        <Paragraph>\n          우리가 시도 중인 초기 버전 게임에서, 어느 한 시점의 상태는 두 줄만으로 간단하게 표현이 됩니다. 뱀은\n          왼쪽으로부터 여섯 번째, 위쪽으로부터 여덟 번째 칸에 위치해있고, 진행 방향은 오른쪽입니다. 이\n          상태값으로 판단해보면 뱀의 다음 위치는 <Code code={'(6, 7)'}/>이 되겠죠?\n        </Paragraph>\n\n      </Right>\n    </div>\n  </Chapter>\n)\n\nexport default Chapter02\n","import React from 'react'\n\nimport {\n  Chapter,\n  Paragraph,\n  Important,\n  InterestingWord,\n  H3,\n  H4,\n  Code,\n  Snippet,\n  DataType,\n  Left,\n  Right,\n  StickyContainer,\n} from '../shared'\nimport * as snippets from '../../../snippets'\nimport ConstantsFigure from '../../constants-figure'\nimport StateFigure from '../../state-figure'\nimport EmptySceneFigure from '../../empty-scene-figure'\nimport StillHeadFigure from '../../still-head-figure'\nimport MovingHeadFigure from '../../moving-head-figure'\n\nconst Chapter03 = ({ title, title1 }) => (\n  <Chapter number={3} title={'렌더링'}>\n    <Paragraph>\n      지금까지 상태 데이터들의 형식을 정의했습니다. 이제 렌더링, 즉 표현을 고민해 볼\n      단계입니다. 우리는 이미 게임에 필요한 모든 데이터를 정의해놓았기 때문에 상태에서 표현으로 넘어가는\n      과정을 최대한 단순하게 볼 필요가 있습니다. 짧게 요약하자면, 여기서 해야 할 일은{' '}\n      게임의 상태 정보인 <InterestingWord very text={'World'}/>를 표현을 담당하는{' '}\n      <InterestingWord text={'React'}/> 컴포넌트에게 전달해주는 것입니다.\n    </Paragraph>\n\n    <div style={{ display: 'flex' }}>\n      <Left>\n        <StickyContainer margin={'5.5em 0 1.5em'}>\n          <EmptySceneFigure />\n        </StickyContainer>\n      </Left>\n\n      <Right>\n        <H3\n          number={'3.1'}\n          text={(\n            <span\n              css={{\n                fontFamily: `Consolas, Menlo, Monaco, \"Andale Mono WT\", \"Andale Mono\", \"Lucida Console\", \"Lucida Sans Typewriter\", \"DejaVu Sans Mono\", \"Bitstream Vera Sans Mono\", \"Liberation Mono\", \"Nimbus Mono L\", \"Courier New\", Courier, monospace`,\n              }}\n            >\n              {'<Scene />'}\n            </span>\n          )}\n        />\n\n        <Paragraph>\n          아직 렌더링 관련 코드는 하나도 쓰지 않았지만, 조금 앞서나가서 <DataType text={'World'}/>\n          {' '}데이터를 넘겨주면 화면에 게임 무대를 표시하는 <Code code={'Scene'}/> 컴포넌트가 이미\n          만들어져 있다고 한 번 생각해볼까요? 만약 그렇다면 그 컴포넌트에 변화하는 상태 데이터를\n          계속해서 넘겨주기만 하면 데이터를 반영하도록 화면이 갱신될 겁니다. 희망사항을 반영해서 코드를\n          써 보면 다음과 같습니다.\n        </Paragraph>\n\n        <Snippet\n          hideFilename\n          startingLineNumber={79}\n          code={\n            `\\\n// Snake\n// 뱀의 최초 상태\nconst initialSnake = snake(position(10, 10)), 'right')\n\n// World\n// 게임 세계의 최초 상태\nconst initialWorld = world(initialSnake)\n\nclass Game extends React.Component {\n  // World\n  state = initialWorld\n\n  // -> ReactElement\n  render () {\n    return (\n      <Scene world={this.state} />\n    )\n  }\n}\n\n// World -> ReactElement\nconst Scene = world => (\n  <div>\n  </div>\n)`\n          }\n        />\n\n        <Paragraph>\n          우선 뱀의 위치는 화면 중앙이고 진행 방향은 오른쪽인 <Code code={'initialWorld'}/>를 만든\n          다음, <Code code={'Game'}/> 컴포넌트의 <InterestingWord text={'state'}/>로\n          배정했습니다. 이 <InterestingWord text={'state'}/>가 바뀔 때마다 아래 쪽{' '}\n          <Code code={'render'}/> 함수 안의 <Code code={'Scene'}/> 컴포넌트가 상태값을 반영해\n          화면을 갱신하게 됩니다. 아직{' '} <Code code={'Scene'}/> 컴포넌트는 작성하지 않았기\n          때문에 오류가 나지 않도록 허수아비만 세워놓은 상태지만 입력받은 <Code code={'world'}/> 안의\n          데이터를 화면에 표시하는 역할을 하게 될 겁니다. 이제 무대의 배경부터 표시해 볼까요?\n        </Paragraph>\n\n        <Snippet\n          code={\n            `\\\n// World -> ReactElement\nconst Scene = world => (\n  <div\n    style={{\n      position: 'relative',\n      width: SCENE_SIZE,\n      height: SCENE_SIZE,\n      backgroundColor: SCENE_COLOR,\n    }}\n  >\n  </div>\n)`\n          }\n        />\n\n        <Paragraph>\n          화면에 출력된 네모난 회색 박스가 게임의 무대입니다. 이제 무대를 채워볼 시간입니다.\n        </Paragraph>\n      </Right>\n    </div>\n\n    <div style={{ display: 'flex' }}>\n      <Left>\n        <StickyContainer margin={'5.5em 0 1.5em'}>\n          <StillHeadFigure />\n        </StickyContainer>\n      </Left>\n\n      <Right>\n        <H3\n          number={'3.2'}\n          text={(\n            <span\n              css={{\n                fontFamily: `Consolas, Menlo, Monaco, \"Andale Mono WT\", \"Andale Mono\", \"Lucida Console\", \"Lucida Sans Typewriter\", \"DejaVu Sans Mono\", \"Bitstream Vera Sans Mono\", \"Liberation Mono\", \"Nimbus Mono L\", \"Courier New\", Courier, monospace`,\n              }}\n            >\n              {'<Snake />'}\n            </span>\n          )}\n        />\n\n        <Paragraph>\n          뱀을 표시하는 것도 방금 무대를 표시했던 것과 크게 다르지 않습니다. 상태값에 영향을 받지 않는\n          무대는 상수만으로 그릴 수 있었던 반면, 뱀은 상태값이 필요하다는 차이점이 있긴 하지만요. 이번에도\n          무대를 그릴 때 했던 것처럼, 있었으면 하는 <Code code={'Snake'}/> 컴포넌트를 먼저 한 번\n          상상해보겠습니다.\n        </Paragraph>\n\n        <Snippet\n          code={\n            `\\\n// World -> ReactElement\nconst Scene = world => (\n  <div\n    style={{\n      position: 'relative',\n      width: SCENE_SIZE,\n      height: SCENE_SIZE,\n      backgroundColor: SCENE_COLOR,\n    }}\n  >\n    <Snake snake={world.snake} />\n  </div>\n)\n\n// Snake -> ReactElement\nconst Snake = snake => <div></div>`\n          }\n        />\n\n        <Paragraph>\n          희망사항을 코드로 구현해봅시다.{' '}\n          <Code code={'Snake'}/> 컴포넌트는 입력 받은 <Code code={'snake'}/>의{' '}\n          <Code code={'position'}/> 값을 이용해 무대 위의 해당 위치에 뱀을 표시하는 역할을 합니다.\n          {' '}<Code code={'position.x'}/> 값으로 무대 왼쪽으로부터의 거리,{' '}\n          <Code code={'position.y'}/> 값으로 무대 위쪽으로부터의 거리를 계산할 수 있습니다.\n        </Paragraph>\n\n        <Snippet\n          code={\n            `\\\n// Snake -> ReactElement\nconst Snake = snake => (\n  <div\n    style={{\n      position: 'absolute',\n      left: snake.position.x * CELL_SIZE,\n      top: snake.position.y * CELL_SIZE,\n      width: CELL_SIZE,\n      height: CELL_SIZE,\n      borderRadius: CELL_SIZE / 2,\n      backgroundColor: SNAKE_COLOR,\n    }}\n  >\n  </div>\n)`\n          }\n        />\n      </Right>\n    </div>\n  </Chapter>\n)\n\nexport default Chapter03\n","import React from 'react'\n\n// =============================================================================\n// Constants\n// =============================================================================\n\n// SCENE_SIZE :: number\n// Size of the scene. Describes how many segments fit into a row or a column.\n// e.g. 20: Up to twenty segments can fit into one row/column.\nconst SCENE_SIZE = 20\n\n// CELL_SIZE :: number\n// A percentage value that tells how much space a segment occupies in a row/col.\n// That is:\n//   CELL_SIZE * SCENE_SIZE = 100\n// e.g. 5: 5%\nconst CELL_SIZE = 100 / SCENE_SIZE\n\n// SCENE_COLOR ::string\nconst SCENE_COLOR = '#f1f3f5'\n\n// SNAKE_COLOR ::string\nconst SNAKE_COLOR = '#5c940d'\n\n// FOOD_COLOR ::string\nconst FOOD_COLOR = '#ffa8a8'\n\n// =============================================================================\n// Data Definitions\n// =============================================================================\n\n// A World is an object:\n//   {\n//      snake:  Snake,\n//      food:   Position,\n//      status: Status\n//   }\n\n// world :: Snake * Position -> World\nconst world = (snake, food, status) => ({ snake, food, status })\n\n// A Status is one of:\n//   - 0: waiting for player\n//   - 1: in play\n//   - 2: game over\n\n// A Snake is an object:\n//   {\n//     positions: Position[],\n//     direction: Direction,\n//   }\n\n// snake :: Position[] * Direction -> Snake\nconst snake = (positions, direction) => ({ positions, direction })\n\n// A Position is an object:\n//   {\n//     x: number,\n//     y: number,\n//   }\n\n// position :: number * number -> Position\nconst position = (x, y) => ({ x, y })\n\n// A Direction is one of:\n//   - 'stop'\n//   - 'up'\n//   - 'right'\n//   - 'down'\n//   - 'left'\nconst directions = {\n  stop: 'stop',\n  up: 'up',\n  right: 'right',\n  down: 'down',\n  left: 'left',\n}\n\nconst initialSnake = snake([ position(3, 3) ], directions.right)\nconst initialWorld = world(initialSnake, position(15, 18), 0)\n\n// An Action is one of:\n//   - 'tick'\n//   - 'up'\n//   - 'down'\n//   - 'left'\n//   - 'right'\nconst actions = {\n  tick: 'tick',\n  up: 'up',\n  down: 'down',\n  left: 'left',\n  right: 'right',\n}\n\n// =============================================================================\n// Functions\n// =============================================================================\n\n// nextWorld :: World * Action -> World\n// Given a state and an action, produces a next state.\nconst nextWorld = (oldWorld = initialWorld, action) => {\n  if (!action) return oldWorld\n\n  switch (action) {\n    case actions.tick: {\n      if (oldWorld.status === 2) {\n        return oldWorld\n      }\n\n      // oldSnake :: Snake\n      const oldSnake = oldWorld.snake\n      // oldPositions :: Position[]\n      const oldPositions = oldSnake.positions\n      // newHead :: Position\n      const newHead = nextHead(oldPositions[0], oldSnake.direction)\n\n      // newPositions :: Positions[]\n      const newPositions =\n        [ newHead, ...oldPositions.slice(0, oldPositions.length - 1) ]\n      // newSnake :: Snake\n      const newSnake = snake(newPositions, oldSnake.direction)\n\n      if (isDead(newSnake)) {\n        return initialWorld\n      }\n\n      // newFood :: Position\n      const newFood = oldWorld.food\n\n      return world(newSnake, newFood, 1)\n    }\n\n    case actions.up: {\n      if (oldWorld.snake.direction === directions.down) {\n        return oldWorld\n      }\n\n      return world(\n        snake(oldWorld.snake.positions, directions.up),\n        oldWorld.food,\n        oldWorld.status\n      )\n    }\n\n    case actions.down: {\n      if (oldWorld.snake.direction === directions.up) {\n        return oldWorld\n      }\n\n      return world(\n        snake(oldWorld.snake.positions, directions.down),\n        oldWorld.food,\n        oldWorld.status\n      )\n    }\n\n    case actions.left: {\n      if (oldWorld.snake.direction === directions.right) {\n        return oldWorld\n      }\n\n      return world(\n        snake(oldWorld.snake.positions, directions.left),\n        oldWorld.food,\n        oldWorld.status\n      )\n    }\n\n    case actions.right: {\n      if (oldWorld.snake.direction === directions.left) {\n        return oldWorld\n      }\n\n      return world(\n        snake(oldWorld.snake.positions, directions.right),\n        oldWorld.food,\n        oldWorld.status\n      )\n    }\n\n    default:\n      return oldWorld\n  }\n}\n\n// nextHead :: Position * Direction -> Position\n// Given a snake's head and a direction, produces a next head.\nconst nextHead = (currentHead, direction) => {\n  let x = currentHead.x\n  let y = currentHead.y\n\n  if (direction === directions.up) {\n    y = y - 1\n  } else if (direction === directions.right) {\n    x = x + 1\n  } else if (direction === directions.down) {\n    y = y + 1\n  } else if (direction === directions.left) {\n    x = x - 1\n  }\n\n  return position(x, y)\n}\n\n// isDead :: Snake -> boolean\n// Is a given snake dead?\n// A snake dies:\n//   - if it hits a wall.\n//   - if it eats itself.\nconst isDead = aSnake =>\n  isHittingWall(aSnake) || isEatingSelf(aSnake)\n\n// isHittingWall :: Snake -> Bool\n// Has a given snake hit a wall?\nconst isHittingWall = aSnake => {\n  const head = aSnake.positions[0]\n\n  return (\n    head.x >= SCENE_SIZE + 20 ||\n    head.y >= SCENE_SIZE + 20 ||\n    head.x < 0 - 20 ||\n    head.y < 0 - 20\n  )\n}\n\n// isEatingSelf :: Snake -> Bool\n// Has a given snake eaten itself?\nconst isEatingSelf = aSnake =>\n  aSnake.positions.slice(1).some(\n    posn => isSamePosition(posn, aSnake.positions[0])\n  )\n\n// isSamePosition :: Position * Position -> boolean\n// Are two given positions actually a same position?\nconst isSamePosition = (posn1, posn2) =>\n  posn1.x === posn2.x && posn1.y === posn2.y\n\n// =============================================================================\n// Main\n// =============================================================================\n\nclass ControllableHeadFigure extends React.Component {\n  // intervalID :: number\n  intervalID = 0\n\n  // state :: World\n  state = nextWorld()\n\n  // componentWillUnmount :: -> void\n  componentWillUnmount () {\n    this.uninstallKeyHandler()\n    this.uninstallTimer()\n  }\n\n  // componentDidUpdate :: object * World -> void\n  componentDidUpdate (prevProps, prevState) {\n    if (prevState.status !== 2 && this.state.status === 2) {\n      this.uninstallKeyHandler()\n      this.uninstallTimer()\n    } else if (prevState.status !== 1 && this.state.status === 1) {\n      this.installKeyHandler()\n      this.installTimer()\n    } else if (prevState.status !== 0 && this.state.status === 0) {\n      this.uninstallKeyHandler()\n      this.uninstallTimer()\n    }\n  }\n\n  // installTimer :: -> void\n  installTimer () {\n    this.uninstallTimer()\n    this.intervalID = setInterval(this.handleTick, 90)\n  }\n\n  // uninstallTimer :: -> void\n  uninstallTimer () {\n    if (this.intervalID) {\n      clearInterval(this.intervalID)\n    }\n  }\n\n  // installKeyHandler :: -> void\n  installKeyHandler () {\n    this.uninstallKeyHandler()\n    document.addEventListener('keydown', this.handleKey)\n  }\n\n  // uninstallKeyHandler :: -> void\n  uninstallKeyHandler () {\n    document.removeEventListener('keydown', this.handleKey)\n  }\n\n  // handleTick :: -> void\n  handleTick = () => {\n    this.setState(state => nextWorld(state, actions.tick))\n  }\n\n  // handleKey :: KeyboardEvent -> void\n  handleKey = e => {\n    e.preventDefault()\n    const { key } = e\n    let action = null\n\n    if (key === 'ArrowUp' || key === 'k') {\n      action = actions.up\n    } else if (key === 'ArrowRight' || key === 'l') {\n      action = actions.right\n    } else if (key === 'ArrowDown' || key === 'j') {\n      action = actions.down\n    } else if (key === 'ArrowLeft' || key === 'h') {\n      action = actions.left\n    }\n\n    if (action) {\n      this.setState(oldWorld => nextWorld(oldWorld, action))\n    }\n  }\n\n  // handlePlayClick :: -> void\n  handlePlayClick = () => {\n    this.setState(world(initialWorld.snake, initialWorld.food, 1))\n  }\n\n  // handleContinueClick :: -> void\n  handleContinueClick = () => {\n    this.uninstallKeyHandler()\n    this.uninstallTimer()\n    this.setState(initialWorld)\n  }\n\n  // render :: -> ReactElement\n  render () {\n    return (\n      <>\n        <Scene\n          world={this.state}\n          onClickPlay={this.handlePlayClick}\n          onClickContinue={this.handleContinueClick}\n        />\n        {/*<div css={{ marginTop: '1em', textAlign: 'center' }}>*/}\n          {/*<button*/}\n            {/*css={{*/}\n              {/*padding: '0.6em 0.9em',*/}\n              {/*outline: 'none',*/}\n              {/*border: '1px solid #ccc',*/}\n              {/*borderRadius: 5,*/}\n              {/*letterSpacing: '0.1em',*/}\n              {/*fontSize: '0.8em',*/}\n              {/*backgroundColor: 'transparent',*/}\n              {/*cursor: 'pointer',*/}\n              {/*':hover': {*/}\n                {/*borderColor: '#aaa',*/}\n              {/*},*/}\n            {/*}}*/}\n            {/*onClick={this.handleContinueClick}*/}\n          {/*>*/}\n            {/*RESET*/}\n          {/*</button>*/}\n          <p\n            css={{\n              margin: '0.3em 0 0',\n              textAlign: 'center',\n              fontSize: '0.9em',\n            }}\n          >\n            방향키로 조작할 수 있는 뱀\n          </p>\n        {/*</div>*/}\n      </>\n    )\n  }\n}\n\n// =============================================================================\n// View\n// =============================================================================\n\n// Scene :: World * function * function -> ReactElement\nconst Scene = ({ world, onClickPlay, onClickContinue }) => (\n  <div\n    css={{\n      position: 'relative',\n      paddingBottom: '100%',\n      width: '100%',\n      height: 0,\n      border: '1px solid #ced4da',\n      backgroundColor: SCENE_COLOR,\n    }}\n  >\n    <SnakeComponent snake={world.snake} />\n    <Guidance\n      status={world.status}\n      onClickPlay={onClickPlay}\n      onClickContinue={onClickContinue}\n    />\n  </div>\n)\n\n// Guidance :: number * function * function -> ReactElement\nconst Guidance = ({ status, onClickPlay, onClickContinue }) => (\n  <div\n    css={{\n      position: 'absolute',\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0,\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      justifyContent: 'center',\n      letterSpacing: '0.1em',\n    }}\n  >\n    {status === 0 && <WaitingForPlayer onClick={onClickPlay} />}\n    {status === 2 && <GameOver onClick={onClickContinue} />}\n  </div>\n)\n\n// WaitingForPlayer :: function -> ReactElement\nconst WaitingForPlayer = ({ onClick }) => (\n  <>\n    <button\n      css={{\n        margin: 0,\n        padding: 0,\n        outline: 'none',\n        border: 'none',\n        width: '100%',\n        height: '100%',\n        letterSpacing: '0.1em',\n        fontSize: '0.8em',\n        backgroundColor: 'transparent',\n        cursor: 'pointer',\n        ':hover': {\n          borderColor: '#aaa',\n        },\n      }}\n      onClick={onClick}\n    >\n      <span\n        css={{\n          padding: '0.6em 0.9em',\n          border: '1px solid #ccc',\n          borderRadius: 5,\n          backgroundColor: 'white',\n          'button:hover &': {\n            border: '1px solid #aaa'\n          },\n        }}\n      >\n        START\n      </span>\n    </button>\n  </>\n)\n\n// GameOver :: function -> ReactElement\nconst GameOver = ({ onClick }) => (\n  <button\n    css={{\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      justifyContent: 'center',\n      margin: 0,\n      padding: 0,\n      outline: 'none',\n      border: 'none',\n      width: '100%',\n      height: '100%',\n      letterSpacing: '0.1em',\n      fontSize: '0.8em',\n      cursor: 'pointer',\n      backgroundColor: 'transparent',\n      ':hover': {\n        borderColor: '#aaa',\n      },\n    }}\n    onClick={onClick}\n  >\n    <p\n      css={{\n        margin: '0 0 0.5em 0',\n        fontSize: '1.5em',\n        fontFamily: 'Georgia',\n        fontStyle: 'italic',\n      }}\n    >\n      Game Over\n    </p>\n    <span\n      css={{\n        padding: '0.6em 0.9em',\n        border: '1px solid #ccc',\n        borderRadius: 5,\n        backgroundColor: 'white',\n        'button:hover &': {\n          border: '1px solid #aaa'\n        },\n      }}\n    >\n      INSERT COIN TO CONTINUE\n    </span>\n  </button>\n)\n\n// SnakeComponent :: Snake -> ReactElement\nconst SnakeComponent = ({ snake }) => (\n  <>\n    {snake.positions.map((position, i) => (\n      <PositionComponent\n        key={i}\n        x={position.x}\n        y={position.y}\n      />\n    ))}\n  </>\n)\n\n// PositionComponent :: Position -> ReactElement\nconst FoodComponent = ({ position }) => (\n  <PositionComponent\n    food\n    x={position.x}\n    y={position.y}\n  />\n)\n\n// PositionComponent :: number * number * boolean -> ReactElement\nconst PositionComponent = ({ x, y, food = false }) => (\n  <div\n    css={{\n      position: 'absolute',\n      left: `${x / SCENE_SIZE * 100}%`,\n      top: `${y / SCENE_SIZE * 100}%`,\n      marginLeft: -1,\n      marginTop: -1,\n      width: `${CELL_SIZE + 1}%`,\n      height: `${CELL_SIZE + 1}%`,\n      border: `2px solid ${SCENE_COLOR}`,\n      borderRadius: '50%',\n    }}\n    style={{\n      backgroundColor: food ? FOOD_COLOR : SNAKE_COLOR,\n    }}\n  />\n)\n\nexport default ControllableHeadFigure\n","import React from 'react'\n\nimport {\n  Chapter,\n  Paragraph,\n  Important,\n  InterestingWord,\n  H3,\n  H4,\n  Code,\n  Snippet,\n  DataType,\n  Left,\n  Right,\n  StickyContainer,\n} from '../shared'\nimport * as snippets from '../../../snippets'\nimport MovingHeadFigure from '../../moving-head-figure'\nimport ControllableHeadFigure from '../../controllable-head-figure'\n\nconst Chapter04 = ({ title, title1 }) => (\n  <Chapter number={4} title={'액션'}>\n    <div style={{ display: 'flex' }}>\n      <Left>\n        <StickyContainer margin={'5.5em 0 1.5em'}>\n          <MovingHeadFigure />\n        </StickyContainer>\n      </Left>\n\n      <Right>\n        <H3 number={'4.1'} text={'움직이는 뱀'} />\n\n        <Paragraph>\n          이제 우리는 뱀을 움직여보려고 합니다. 뱀이 지금까지 가만히 멈춰만 있었던 이유는{' '}\n          <DataType text={'World'}/>에 아무런 변동이 없었기 때문입니다. 이 게임에서 뱀은 일정\n          시간 간격으로 한 칸씩 전진해야 하므로, 계속해서 상태를 바꿔 줄 필요가 있습니다. 아이디어는\n          간단합니다. 일정 시간 간격으로 뱀의 위치가 업데이트된 새로운{' '}\n          <DataType text={'World'}/>를 만들어, 그걸로 기존{' '}\n          <DataType text={'World'}/>를 교체하는 것입니다. 좀 전에 우리가 만든{' '}\n          <Code code={'Scene'}/> 컴포넌트에게 새 <DataType text={'World'}/>를 넘겨주면\n          화면을 갱신하는 일은 알아서 해 줄 겁니다. 마치 스톱 모션 애니메이션처럼 말이죠.\n        </Paragraph>\n\n        <Paragraph>\n          일정 시간 간격이 지나 뱀이 앞으로 한 칸 움직여야 할 때, 기존{' '}\n          <DataType text={'World'}/> 데이터를 바탕으로 뱀의 위치가 업데이트된 새로운{' '}\n          <DataType text={'World'}/>를 만들 수 있습니다. 이 아이디어를{' '}\n          <Code code={'nextWorld'}/>라는 함수로 표현해볼까요? 일단 새{' '}\n          <DataType text={'World'}/>를 만드는 로직은 비워두고 언제나 기존{' '}\n          <DataType text={'World'}/>와 똑같은 복사본을 만들어 반환하도록 합니다.\n        </Paragraph>\n\n        <Snippet\n          hideFilename\n          code={\n            `\\\n// An Action is one of:\n//   - 'tick'`\n          }\n        />\n\n        <Snippet\n          code={\n            `\\\n// World * Action -> World\nconst nextWorld = (oldWorld, action) => {\n  if (action === 'tick') {\n    // World\n    const newWorld = world(oldWorld.snake)\n\n    return newWorld\n  }\n\n  return oldWorld\n}`\n          }\n        />\n\n        <Paragraph>\n          우리는 게임의 상태인 <DataType text={'World'}/>를 어떤 식으로든 변경하려고 할 때마다\n          매번 변경사항이 적용된 새로운{' '} <DataType text={'World'}/>를 만들 것입니다.\n          이렇게 만들어진 새로운{' '} <DataType text={'World'}/>를 기존의{' '}\n          <DataType text={'World'}/>와 바꿔치기하는 것으로 상태 변경의 한 사이클이 끝납니다.\n          위의 {' '}<Code code={'nextWorld'}/>는 상태 변경이 필요한 매 순간마다 새 상태를\n          만들어내기 위해 호출될 함수입니다. 말 그대로 모든 상태 변경은 이{' '}\n          <Code code={'nextWorld'}/>를 거쳐갑니다.\n        </Paragraph>\n\n        <Paragraph>\n          하지만 기존 <DataType text={'World'}/>의 정보만으로는 새로운{' '}\n          <DataType text={'World'}/>를 만들어내기에 충분하지 않습니다.{' '}\n          변경의 의도를 알아야 <DataType text={'World'}/>의 어떤 부분을 어떻게 바꿀 수 있을지 결정할\n          수 있겠죠? 예를 들면 일정 시간 간격이 지났으니 뱀이 한 칸 앞으로 움직여야 한다던가 하는 식으로요.\n        </Paragraph>\n\n        <Paragraph>\n          위의 <Code code={'nextWorld'}/> 함수 정의를 보면 기존 <DataType text={'World'}/>\n          {' '}외에 <DataType text={'Action'}/>이라는 것을 같이 받도록 되어 있습니다.{' '}\n          <DataType text={'Action'}/> 안에는 상태 변경에 대한 의도가 담겨 있어,\n          이를 통해 기존의 상태에 어떤 변경사항을 적용해서 새 상태를 만들어내야 할지를 알 수 있습니다.\n          뱀 게임 세계에는 <DataType text={'Action'}/>을 유발하는, 즉 상태를 업데이트시키는\n          요인이 크게 두 가지가 있습니다.\n        </Paragraph>\n\n        <ul>\n          <li>\n            시간의 경과\n          </li>\n          <li>\n            방향키 입력에 따른 진행 방향 변경\n          </li>\n        </ul>\n\n        <Paragraph>\n          위의 코드는 아직 다른 <DataType text={'Action'}/>은 무시하고{' '}\n          <Code code={'tick'}/>에 대해서만 새로운 상태를 만들 준비를 하고 있습니다. 이{' '}\n          <Code code={'tick'}/>은 뱀이 전진해야 할 시간을 알리는 것이므로 우리는 뱀이 한 칸\n          전진한 새로운 <DataType text={'World'}/>를 만들어내야 합니다.\n        </Paragraph>\n\n        <Paragraph>\n          이제 움직이는 뱀이 코 앞에 있습니다! <Code code={'nextWorld'}/> 함수 안에 뱀 위치가\n          업데이트된 <DataType text={'World'}/>를 만드는 로직을 작성하고, 일정한 시간 간격으로\n          {' '}<Code code={'tick'}/> 액션을 발생시키는 타이머를 설치하기만 하면 됩니다.\n        </Paragraph>\n\n        <Snippet\n          code={\n            `\\\n/// World * Action -> World\nconst nextWorld = (oldWorld, action) => {\n  if (action === 'tick') {\n    // Snake\n    const oldSnake = oldWorld.snake\n    // Position\n    const newPosition = nextHead(oldSnake.position, oldSnake.direction)\n    // World\n    const newWorld = world(newSnake)\n\n    return newWorld\n  }\n\n  return oldWorld\n}\n\n// Position * Direction -> Position\n// Given a snake's head and a direction, produces a next head.\nconst nextHead = (posn, dir) => {\n  // number\n  let x = posn.x\n  // number\n  let y = posn.y\n\n  if (dir === 'up') {\n    y = y - 1\n  } else if (dir === 'down') {\n    y = y + 1\n  } else if (dir === 'left') {\n    x = x - 1\n  } else if (dir === 'right') {\n    x = x + 1\n  }\n\n  return position(x, y)\n}\n`\n          }\n        />\n\n        <Paragraph>\n          위 코드에서 뱀의 새로운 위치를 구하기 위해 <Code code={'nextHead'}/>라는 보조 함수를\n          사용하고 있습니다. <Code code={'nextHead'}/>는 현재 진행 방향에 따라{' '}\n          <Code code={'x'}/> 혹은 <Code code={'y'}/> 좌표값 중 하나의 값을 증가 혹은\n          감소시켜 새로운 <DataType text={'Position'}/>을 만들고 있습니다. 이걸로{' '}\n          <Code code={'nextWorld'}/>는 <Code code={'tick'}/>이 발생할 때마다 새로운\n          <DataType text={'World'}/>를 만들어낼 준비가\n          끝났습니다. 이제 일정 시간 간격으로 <Code code={'tick'}/>을 반복 발생시킬\n          타이머만 있으면 움직이는 뱀을 볼 수 있습니다.\n        </Paragraph>\n\n        <Snippet\n          code={\n            `\\\nclass Game extends React.Component {\n  // World\n  state = initialWorld\n\n  // -> void\n  componentDidMount () {\n    setInterval(this.handleTick, INTERVAL)\n  }\n\n  // -> void\n  handleTick = () => {\n    this.setState(oldWorld => nextWorld(oldWorld, 'tick'))\n  }\n\n  // ...\n}`\n          }\n        />\n\n        <Paragraph>\n          <Code code={'INTERVAL'}/> 밀리초 간격으로\n          {' '}<Code code={'handleTick'}/> 메서드를 실행하는 타이머가 설치되었습니다.{' '}\n          <Code code={'handleTick'}/> 메서드는 타이머에 의해 반복적으로 실행될 때마다\n          매번 <Code code={'nextWorld'}/>를 이용해서 새 <DataType text={'World'}/>를\n          만든 다음, 그것을 기존의 <DataType text={'World'}/>와 교체해주고 있습니다.\n\n        </Paragraph>\n\n        <Paragraph>\n          뱀의 위치가 한 칸 옮겨진 이 새로운 <DataType text={'World'}/>가{' '}\n          <Code code={'<Scene />'}/> 컴포넌트에 전달되고, 요주의 데이터인{' '}\n          <DataType text={'Snake'}/>가 다시 <Code code={'<Snake />'}/>{' '}\n          컴포넌트에 전달되면서 화면에 표시되는 뱀의 위치가 갱신되고 있습니다. 아직 방향을 바꿀 수 없어서\n          금방 벽을 뚫고 사라져 버리긴 하지만 이제 뱀이 움직이고 있습니다!\n        </Paragraph>\n      </Right>\n    </div>\n\n    <div style={{ display: 'flex' }}>\n      <Left>\n        <StickyContainer margin={'5.5em 0 1.5em'}>\n          <ControllableHeadFigure />\n        </StickyContainer>\n      </Left>\n\n      <Right>\n        <H3 number={'4.2'} text={'방향을 바꾸는 뱀'} />\n\n        <Paragraph>\n          위에서 <Code code={'nextHead'}/> 함수를 통해 뱀의 현재 진행 방향에 따라 다음 위치가\n          결정되도록 했었죠. 이제 진행 방향을 바꾸는 <DataType text={'Action'}/>들을 처리해서\n          플레이어가 뱀을 마음대로 조작할 수 있도록 할 차례입니다. 현재 정의되어 있는{' '}\n          <Code code={'tick'}/> 외에 상/하/좌/우 네 방향에 대해 모두 별도로, 총 네 개의{' '}\n          <DataType text={'Action'}/>을 추가합니다.\n        </Paragraph>\n\n        <Snippet\n          code={\n            `\\\n// An Action is one of:\n//   - 'tick'\n//   - 'up'\n//   - 'down'\n//   - 'left'\n//   - 'right'`\n          }\n        />\n\n        <Paragraph>\n          상/하/좌/우를 나타내는 이 네 개의 값들은 문자 그대로 각각 해당 방향으로의 방향 전환을\n          의미합니다. 이 추가된 <DataType text={'Action'}/>들 역시{' '}\n          <Code code={'nextWorld'}/> 함수를 거쳐 뱀의 진행 방향이 업데이트된 새로운{' '}\n          <DataType text={'World'}/>를 만들어내어야 합니다.\n        </Paragraph>\n\n        <Snippet\n          code={\n            `\\\n// World * Action -> World\nconst nextWorld = (oldWorld, action) => {\n  if (action === 'tick') {\n    // Snake\n    const oldSnake = oldWorld.snake\n    // Position\n    const newPosition = nextHead(oldSnake.position, oldSnake.direction)\n    // Snake\n    const newSnake = snake(newPosition, oldSnake.direction)\n\n    return world(newSnake)\n  }\n\n  if (action === 'up') {\n    // Snake\n    const newSnake = snake(oldSnake.position, 'up')\n\n    return world(newSnake)\n  }\n\n  if (action === 'down') {\n    // Snake\n    const newSnake = snake(oldSnake.position, 'down')\n\n    return world(newSnake)\n  }\n\n  if (action === 'left') {\n    // Snake\n    const newSnake = snake(oldSnake.position, 'left')\n\n    return world(newSnake)\n  }\n\n  if (action === 'right') {\n    // Snake\n    const newSnake = snake(oldSnake.position, 'right')\n\n    return world(newSnake)\n  }\n\n  return oldWorld\n}`\n          }\n        />\n\n        <Paragraph>\n          방향 전환을 처리하는 위의 코드에 대해서는 별달리 설명할 부분이 없습니다. 단순히 인자{' '}\n          <Code code={'action'}/>에 따라 방향이 변경된 <DataType text={'Snake'}/>를\n          {' '}만들고, 그걸로 다시 <DataType text={'World'}/>를 만들어 반환하고 있습니다.\n          지금은 이 정도로 해 놓고 나중에 후진 금지 같은 제약을 넣어보는 것도 괜찮겠죠?\n        </Paragraph>\n\n        <Paragraph>\n          자, 이제 사용자의 방향키 입력만 처리해주면 뱀을 조작할 있습니다. 위에서 타이머가{' '}\n          <Code code={'tick'}/>을 일정 주기로 발생시켰던 것과 아이디어는 별반 다르지 않습니다.\n          그 때는 일정 주기로 <Code code={'tick'}/>을 <Code code={'nextWorld'}/>{' '}\n          함수에 인자로 넘겨 새 <DataType text={'World'}/>를 만들었었죠. 이번에는 사용자가\n          방향키를 누를 때마다 해당 <DataType text={'Action'}/>을{' '}\n          <Code code={'nextWorld'}/> 함수에 인자로 넘겨 새{' '}\n          <DataType text={'World'}/>를 만들 겁니다. 그런 다음{' '}\n          <InterestingWord text={'React'}/>의 <Code code={'setState'}/>를 이용해\n          기존의 <DataType text={'World'}/>를 대체해주는 걸로 방향 전환의 사이클이 끝이 납니다.\n        </Paragraph>\n\n        <Snippet\n          code={\n            `\\\nclass Game extends React.Component {\n  // World\n  state = initialWorld\n\n  // -> void\n  componentDidMount () {\n    document.addEventListener('keydown', this.handleKey)\n    setInterval(this.handleTick, INTERVAL)\n  }\n\n  // KeyboardEvent -> void\n  handleKey = e => {\n    const { key } = e\n    let action = null\n\n    if (key === 'ArrowUp') {\n      action = 'up'\n    } else if (key === 'ArrowDown') {\n      action = 'down'\n    } else if (key === 'ArrowLeft') {\n      action = 'left'\n    } else if (key === 'ArrowRight') {\n      action = 'right'\n    }\n\n    if (action) {\n      this.setState(oldWorld => nextWorld(oldWorld, action))\n    }\n  }\n\n  // ...\n}`\n          }\n        />\n\n      </Right>\n    </div>\n  </Chapter>\n)\n\nexport default Chapter04\n","import React from 'react'\n\nimport {\n  Chapter,\n  Paragraph,\n  Important,\n  InterestingWord,\n  H3,\n  H4,\n  Code,\n  Snippet,\n  DataType,\n  Left,\n  Right,\n  StickyContainer,\n} from '../shared'\nimport * as snippets from '../../../snippets'\nimport ConstantsFigure from '../../constants-figure'\nimport StateFigure from '../../state-figure'\nimport EmptySceneFigure from '../../empty-scene-figure'\nimport StillHeadFigure from '../../still-head-figure'\nimport MovingHeadFigure from '../../moving-head-figure'\n\nconst Chapter05 = ({ title, title1 }) => (\n  <Chapter number={5} title={'게임 오버 (Work in Progress)'}>\n    <Paragraph>\n      Coming soon.\n    </Paragraph>\n  </Chapter>\n)\n\nexport default Chapter05\n","import React from 'react'\n\nimport Chapter00 from './chapter00'\nimport Chapter01 from './chapter01'\nimport Chapter02 from './chapter02'\nimport Chapter03 from './chapter03'\nimport Chapter04 from './chapter04'\nimport Chapter05 from './chapter05'\n\nconst Chapters = ({ title, title1 }) => (\n  <>\n    <Chapter00 title={title} title1={title1} />\n    <Chapter01 title={title} title1={title1} />\n    <Chapter02 title={title} title1={title1} />\n    <Chapter03 title={title} title1={title1} />\n    <Chapter04 title={title} title1={title1} />\n    <Chapter05 title={title} title1={title1} />\n  </>\n)\n\nexport default Chapters\n","import React from 'react'\nimport random from 'lodash.random'\n\n// =============================================================================\n// Constants\n// =============================================================================\n\n// SCENE_SIZE :: number\n// Size of the scene. Describes how many segments fit into a row or a column.\n// e.g. 20: Up to twenty segments can fit into one row/column.\nconst SCENE_SIZE = 20\n\n// CELL_SIZE :: number\n// A percentage value that tells how much space a segment occupies in a row/col.\n// That is:\n//   CELL_SIZE * SCENE_SIZE = 100\n// e.g. 5: 5%\nconst CELL_SIZE = 100 / SCENE_SIZE\n\n// SCENE_COLOR ::string\nconst SCENE_COLOR = '#f1f3f5'\n\n// SNAKE_COLOR ::string\nconst SNAKE_COLOR = '#5c940d'\n\n// FOOD_COLOR ::string\nconst FOOD_COLOR = '#ffa8a8'\n\n// =============================================================================\n// Data Definitions\n// =============================================================================\n\n// A World is an object:\n//   {\n//      snake:  Snake,\n//      food:   Position,\n//      status: Status\n//   }\n\n// world :: Snake * Position -> World\nconst world = (snake, food, status) => ({ snake, food, status })\n\n// A Status is one of:\n//   - 0: waiting for player\n//   - 1: in play\n//   - 2: game over\n\n// A Snake is an object:\n//   {\n//     positions: Position[],\n//     direction: Direction,\n//   }\n\n// snake :: Position[] * Direction -> Snake\nconst snake = (positions, direction) => ({ positions, direction })\n\n// A Position is an object:\n//   {\n//     x: number,\n//     y: number,\n//   }\n\n// position :: number * number -> Position\nconst position = (x, y) => ({ x, y })\n\n// A Direction is one of:\n//   - 'stop'\n//   - 'up'\n//   - 'right'\n//   - 'down'\n//   - 'left'\nconst directions = {\n  stop: 'stop',\n  up: 'up',\n  right: 'right',\n  down: 'down',\n  left: 'left',\n}\n\nconst initialSnake = snake([ position(3, 3) ], directions.right)\nconst initialWorld = world(initialSnake, position(15, 18), 0)\n\n// An Action is one of:\n//   - 'tick'\n//   - 'up'\n//   - 'down'\n//   - 'left'\n//   - 'right'\nconst actions = {\n  tick: 'tick',\n  up: 'up',\n  down: 'down',\n  left: 'left',\n  right: 'right',\n}\n\n// =============================================================================\n// Functions\n// =============================================================================\n\n// nextWorld :: World * Action -> World\n// Given a state and an action, produces a next state.\nconst nextWorld = (oldWorld = initialWorld, action) => {\n  if (!action) return oldWorld\n\n  switch (action) {\n    case actions.tick: {\n      if (oldWorld.status === 2) {\n        return oldWorld\n      }\n\n      // oldSnake :: Snake\n      const oldSnake = oldWorld.snake\n      // oldPositions :: Position[]\n      const oldPositions = oldSnake.positions\n      // newHead :: Position\n      const newHead = nextHead(oldPositions[0], oldSnake.direction)\n\n      // willGrow :: boolean\n      const willGrow = isSamePosition(newHead, oldWorld.food)\n      // newPositions :: Positions[]\n      const newPositions = willGrow\n        ? [ newHead, ...oldPositions ]\n        : [ newHead, ...oldPositions.slice(0, oldPositions.length - 1) ]\n      // newSnake :: Snake\n      const newSnake = snake(newPositions, oldSnake.direction)\n\n      if (isDead(newSnake)) {\n        return world(oldWorld.snake, oldWorld.food, 2)\n      }\n\n      // newFood :: Position\n      const newFood = willGrow ? randomFood(newHead) : oldWorld.food\n\n      return world(newSnake, newFood, 1)\n    }\n\n    case actions.up: {\n      if (oldWorld.snake.direction === directions.down) {\n        return oldWorld\n      }\n\n      return world(\n        snake(oldWorld.snake.positions, directions.up),\n        oldWorld.food,\n        oldWorld.status\n      )\n    }\n\n    case actions.down: {\n      if (oldWorld.snake.direction === directions.up) {\n        return oldWorld\n      }\n\n      return world(\n        snake(oldWorld.snake.positions, directions.down),\n        oldWorld.food,\n        oldWorld.status\n      )\n    }\n\n    case actions.left: {\n      if (oldWorld.snake.direction === directions.right) {\n        return oldWorld\n      }\n\n      return world(\n        snake(oldWorld.snake.positions, directions.left),\n        oldWorld.food,\n        oldWorld.status\n      )\n    }\n\n    case actions.right: {\n      if (oldWorld.snake.direction === directions.left) {\n        return oldWorld\n      }\n\n      return world(\n        snake(oldWorld.snake.positions, directions.right),\n        oldWorld.food,\n        oldWorld.status\n      )\n    }\n\n    default:\n      return oldWorld\n  }\n}\n\n// randomFood :: Position -> Position\n// Produces a random position that is not a given position.\n// effect. random\nconst randomFood = aPosition => {\n  let aFood = position(\n    random(0, SCENE_SIZE - 1),\n    random(0, SCENE_SIZE - 1)\n  )\n\n  while (isSamePosition(aFood, aPosition)) {\n    aFood = position(\n      random(0, SCENE_SIZE - 1),\n      random(0, SCENE_SIZE - 1)\n    )\n  }\n\n  return aFood\n}\n\n// nextHead :: Position * Direction -> Position\n// Given a snake's head and a direction, produces a next head.\nconst nextHead = (currentHead, direction) => {\n  let x = currentHead.x\n  let y = currentHead.y\n\n  if (direction === directions.up) {\n    y = y - 1\n  } else if (direction === directions.right) {\n    x = x + 1\n  } else if (direction === directions.down) {\n    y = y + 1\n  } else if (direction === directions.left) {\n    x = x - 1\n  }\n\n  return position(x, y)\n}\n\n// isDead :: Snake -> boolean\n// Is a given snake dead?\n// A snake dies:\n//   - if it hits a wall.\n//   - if it eats itself.\nconst isDead = aSnake =>\n  isHittingWall(aSnake) || isEatingSelf(aSnake)\n\n// isHittingWall :: Snake -> Bool\n// Has a given snake hit a wall?\nconst isHittingWall = aSnake => {\n  const head = aSnake.positions[0]\n\n  return (\n    head.x >= SCENE_SIZE ||\n    head.y >= SCENE_SIZE ||\n    head.x < 0 ||\n    head.y < 0\n  )\n}\n\n// isEatingSelf :: Snake -> Bool\n// Has a given snake eaten itself?\nconst isEatingSelf = aSnake =>\n  aSnake.positions.slice(1).some(\n    posn => isSamePosition(posn, aSnake.positions[0])\n  )\n\n// isSamePosition :: Position * Position -> boolean\n// Are two given positions actually a same position?\nconst isSamePosition = (posn1, posn2) =>\n  posn1.x === posn2.x && posn1.y === posn2.y\n\n// =============================================================================\n// Main\n// =============================================================================\n\nclass Game extends React.Component {\n  // intervalID :: number\n  intervalID = 0\n\n  // state :: World\n  state = nextWorld()\n\n  // componentWillUnmount :: -> void\n  componentWillUnmount () {\n    this.uninstallTimer()\n  }\n\n  // componentDidUpdate :: object * World -> void\n  componentDidUpdate (prevProps, prevState) {\n    if (prevState.status !== 2 && this.state.status === 2) {\n      this.uninstallKeyHandler()\n      this.uninstallTimer()\n    } else if (prevState.status !== 1 && this.state.status === 1) {\n      this.installKeyHandler()\n      this.installTimer()\n    }\n  }\n\n  // installTimer :: -> void\n  installTimer () {\n    this.uninstallTimer()\n    this.intervalID = setInterval(this.handleTick, 90)\n  }\n\n  // uninstallTimer :: -> void\n  uninstallTimer () {\n    if (this.intervalID) {\n      clearInterval(this.intervalID)\n    }\n  }\n\n  // installKeyHandler :: -> void\n  installKeyHandler () {\n    this.uninstallKeyHandler()\n    document.addEventListener('keydown', this.handleKey)\n  }\n\n  // uninstallKeyHandler :: -> void\n  uninstallKeyHandler () {\n    document.removeEventListener('keydown', this.handleKey)\n  }\n\n  // handleTick :: -> void\n  handleTick = () => {\n    this.setState(state => nextWorld(state, actions.tick))\n  }\n\n  // handleKey :: KeyboardEvent -> void\n  handleKey = e => {\n    e.preventDefault()\n    const { key } = e\n    let action = null\n\n    if (key === 'ArrowUp' || key === 'k') {\n      action = actions.up\n    } else if (key === 'ArrowRight' || key === 'l') {\n      action = actions.right\n    } else if (key === 'ArrowDown' || key === 'j') {\n      action = actions.down\n    } else if (key === 'ArrowLeft' || key === 'h') {\n      action = actions.left\n    }\n\n    if (action) {\n      this.setState(oldWorld => nextWorld(oldWorld, action))\n    }\n  }\n\n  // handlePlayClick :: -> void\n  handlePlayClick = () => {\n    this.setState(world(initialWorld.snake, initialWorld.food, 1))\n  }\n\n  // handleContinueClick :: -> void\n  handleContinueClick = () => {\n    this.setState(initialWorld)\n  }\n\n  // render :: -> ReactElement\n  render () {\n    return (\n      <Scene\n        world={this.state}\n        onClickPlay={this.handlePlayClick}\n        onClickContinue={this.handleContinueClick}\n      />\n    )\n  }\n}\n\n// =============================================================================\n// View\n// =============================================================================\n\n// Scene :: World * function * function -> ReactElement\nconst Scene = ({ world, onClickPlay, onClickContinue }) => (\n  <div\n    css={{\n      position: 'relative',\n      paddingBottom: '100%',\n      width: '100%',\n      height: 0,\n      border: '1px solid #ced4da',\n      backgroundColor: SCENE_COLOR,\n    }}\n  >\n    <FoodComponent position={world.food} />\n    <SnakeComponent snake={world.snake} />\n    <Guidance\n      status={world.status}\n      onClickPlay={onClickPlay}\n      onClickContinue={onClickContinue}\n    />\n  </div>\n)\n\n// Guidance :: number * function * function -> ReactElement\nconst Guidance = ({ status, onClickPlay, onClickContinue }) => (\n  <div\n    css={{\n      position: 'absolute',\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0,\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      justifyContent: 'center',\n      letterSpacing: '0.1em',\n    }}\n  >\n    {status === 0 && <WaitingForPlayer onClick={onClickPlay} />}\n    {status === 2 && <GameOver onClick={onClickContinue} />}\n  </div>\n)\n\n// WaitingForPlayer :: function -> ReactElement\nconst WaitingForPlayer = ({ onClick }) => (\n  <>\n    <button\n      css={{\n        margin: 0,\n        padding: 0,\n        outline: 'none',\n        border: 'none',\n        width: '100%',\n        height: '100%',\n        letterSpacing: '0.1em',\n        fontSize: '0.8em',\n        backgroundColor: 'transparent',\n        cursor: 'pointer',\n        ':hover': {\n          borderColor: '#aaa',\n        },\n      }}\n      onClick={onClick}\n    >\n      <span\n        css={{\n          padding: '0.6em 0.9em',\n          border: '1px solid #ccc',\n          borderRadius: 5,\n          backgroundColor: 'white',\n          'button:hover &': {\n            border: '1px solid #aaa'\n          },\n        }}\n      >\n        PLAY\n      </span>\n    </button>\n  </>\n)\n\n// GameOver :: function -> ReactElement\nconst GameOver = ({ onClick }) => (\n  <button\n    css={{\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      justifyContent: 'center',\n      margin: 0,\n      padding: 0,\n      outline: 'none',\n      border: 'none',\n      width: '100%',\n      height: '100%',\n      letterSpacing: '0.1em',\n      fontSize: '0.8em',\n      cursor: 'pointer',\n      backgroundColor: 'transparent',\n      ':hover': {\n        borderColor: '#aaa',\n      },\n    }}\n    onClick={onClick}\n  >\n    <p\n      css={{\n        margin: '0 0 0.5em 0',\n        fontSize: '1.5em',\n        fontFamily: 'Georgia',\n        fontStyle: 'italic',\n      }}\n    >\n      Game Over\n    </p>\n    <span\n      css={{\n        padding: '0.6em 0.9em',\n        border: '1px solid #ccc',\n        borderRadius: 5,\n        backgroundColor: 'white',\n        'button:hover &': {\n          border: '1px solid #aaa'\n        },\n      }}\n    >\n      INSERT COIN TO CONTINUE\n    </span>\n  </button>\n)\n\n// SnakeComponent :: Snake -> ReactElement\nconst SnakeComponent = ({ snake }) => (\n  <>\n    {snake.positions.map((position, i) => (\n      <PositionComponent\n        key={i}\n        x={position.x}\n        y={position.y}\n      />\n    ))}\n  </>\n)\n\n// PositionComponent :: Position -> ReactElement\nconst FoodComponent = ({ position }) => (\n  <PositionComponent\n    food\n    x={position.x}\n    y={position.y}\n  />\n)\n\n// PositionComponent :: number * number * boolean -> ReactElement\nconst PositionComponent = ({ x, y, food = false }) => (\n  <div\n    css={{\n      position: 'absolute',\n      left: `${x / SCENE_SIZE * 100}%`,\n      top: `${y / SCENE_SIZE * 100}%`,\n      marginLeft: -1,\n      marginTop: -1,\n      width: `${CELL_SIZE + 1}%`,\n      height: `${CELL_SIZE + 1}%`,\n      border: `2px solid ${SCENE_COLOR}`,\n      borderRadius: '50%',\n    }}\n    style={{\n      backgroundColor: food ? FOOD_COLOR : SNAKE_COLOR,\n    }}\n  />\n)\n\nexport default Game\n","import React from 'react'\nimport { graphql } from 'gatsby'\n\nimport SEO from '../components/seo'\nimport Layout from '../components/layout'\nimport {\n  Chapters,\n  Game,\n} from '../components'\n\nconst IndexPage = ({ data }) => {\n  const { title, title1 } = data.site.siteMetadata\n\n  return (\n    <Layout>\n      <SEO\n        title={'뱀 게임 만드는 법 (How to Make Snake Game)'}\n      />\n\n      <div css={[ styles.container ]}>\n        {/*<div css={[ styles.left ]}>*/}\n          {/*<div css={[ styles.game ]}>*/}\n            {/*<Game />*/}\n          {/*</div>*/}\n        {/*</div>*/}\n\n        <div css={[ styles.right ]}>\n          <Chapters title={title} title1={title1} />\n          <div css={{ height: 300 }} />\n        </div>\n      </div>\n\n    </Layout>\n  )\n}\n\nconst styles = {\n  container: {\n    display: 'flex',\n    width: '100%',\n  },\n  left: {\n    width: '40%',\n  },\n  right: {\n    width: '100%',\n  },\n  game: {\n    position: 'sticky',\n    top: '25vh',\n    height: '50vh',\n    // transform: 'translateY(-50%)',\n  },\n}\n\nexport const query = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n        title1\n      }\n    }\n  }\n`\n\nexport default IndexPage\n","module.exports = \"// go :: string -> string\\nfunction go (s) {\\n  return 'Hello ' + s\\n}\\n\""],"sourceRoot":""}